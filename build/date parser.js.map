{"version":3,"sources":["../source/date parser.js"],"names":["parse_dates","hours","minutes","midnight_weird","seconds","milliseconds","time","timezone_hours","timezone_minutes","timezone","year","month","day","ISO_date_regexp","ISO_date_matcher","RegExp","object","test","Date","Array","i","length","key"],"mappings":";;;;;;;;;;;;;;;kBAoCwBA,W;;AApCxB;;;;AAEA;AACA;;AAEA,IAAMC,QAAQ,kBAAd;AACA,IAAMC,UAAU,UAAhB;AACA,IAAMC,iBAAiB,SAAvB;AACA,IAAMC,UAAU,UAAhB;AACA,IAAMC,eAAe,MAArB;AACA,IAAMC,aAAWL,KAAX,WAAsBC,OAAtB,SAAiCC,cAAjC,YAAsDC,OAAtD,eAAuEC,YAAvE,OAAN;;AAEA,IAAME,mCAAN;AACA,IAAMC,6BAAN;AACA,IAAMC,8BAA4BF,cAA5B,aAAkDC,gBAAlD,QAAN;;AAEA,IAAME,OAAO,QAAb;AACA,IAAMC,QAAQ,iBAAd;AACA,IAAMC,MAAM,wBAAZ;;AAEO,IAAMC,4CAAqBH,IAArB,SAA6BC,KAA7B,SAAsCC,GAAtC,SAA6CN,IAA7C,GAAoDG,QAA1D;AACA,IAAMK,8CAAmB,IAAIC,MAAJ,CAAW,MAAMF,eAAN,GAAwB,GAAnC,CAAzB;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACe,SAASb,WAAT,CAAqBgB,MAArB,EACf;AACC;AACA,KAAI,OAAOA,MAAP,KAAkB,QAAlB,IAA8BF,iBAAiBG,IAAjB,CAAsBD,MAAtB,CAAlC,EACA;AACC,SAAO,IAAIE,IAAJ,CAASF,MAAT,CAAP;AACA;AACD;AACA;AALA,MAMK,IAAIA,kBAAkBG,KAAtB,EACL;AACC,OAAIC,IAAI,CAAR;AACA,UAAOA,IAAIJ,OAAOK,MAAlB,EACA;AACCL,WAAOI,CAAP,IAAYpB,YAAYgB,OAAOI,CAAP,CAAZ,CAAZ;AACAA;AACA;AACD;AACD;AACA;AACA;AAXK,OAYA,IAAI,wBAAUJ,MAAV,CAAJ,EACL;AAAA;AAAA;AAAA;;AAAA;AACC,qDAAgB,oBAAYA,MAAZ,CAAhB,4GACA;AAAA,UADSM,GACT;;AACC;AACAN,aAAOM,GAAP,IAActB,YAAYgB,OAAOM,GAAP,CAAZ,CAAd;AACA;AALF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMC;;AAED;AACA,QAAON,MAAP;AACA","file":"date parser.js","sourcesContent":["import { is_object } from './helpers'\n\n// ISO 8601 date regular expression\n// Adapted from: http://stackoverflow.com/a/14322189/970769\n\nconst hours = '([01]\\\\d|2[0-3])'\nconst minutes = '[0-5]\\\\d'\nconst midnight_weird = '24\\\\:00'\nconst seconds = '[0-5]\\\\d'\nconst milliseconds = '\\\\d+'\nconst time = `(${hours}\\\\:${minutes}|${midnight_weird})\\\\:${seconds}([\\\\.,]${milliseconds})?`\n\nconst timezone_hours = `([01]\\\\d|2[0-3])`\nconst timezone_minutes = `[0-5]\\\\d`\nconst timezone = `([zZ]|([\\\\+-])${timezone_hours}\\\\:?(${timezone_minutes})?)`\n\nconst year = '\\\\d{4}'\nconst month = '(0[1-9]|1[0-2])'\nconst day = '([12]\\\\d|0[1-9]|3[01])'\n\nexport const ISO_date_regexp = `${year}-${month}-${day}T${time}${timezone}`\nexport const ISO_date_matcher = new RegExp('^' + ISO_date_regexp + '$')\n\n// JSON date deserializer.\n//\n// Automatically converts ISO serialized `Date`s\n// in JSON responses for Ajax HTTP requests.\n//\n// Without it the developer would have to convert\n// `Date` strings to `Date`s in Ajax HTTP responses manually.\n//\n// Use as the second, 'reviver' argument to `JSON.parse`: `JSON.parse(json, JSON.date_parser)`\n//\n// http://stackoverflow.com/questions/14488745/javascript-json-date-deserialization/23691273#23691273\n\n// Walks JSON object tree\nexport default function parse_dates(object)\n{\n\t// If it's a date in an ISO string format, then parse it\n\tif (typeof object === 'string' && ISO_date_matcher.test(object))\n\t{\n\t\treturn new Date(object)\n\t}\n\t// If an array is encountered, \n\t// proceed recursively with each element of this array.\n\telse if (object instanceof Array)\n\t{\n\t\tlet i = 0\n\t\twhile (i < object.length)\n\t\t{\n\t\t\tobject[i] = parse_dates(object[i])\n\t\t\ti++\n\t\t}\n\t}\n\t// If a child JSON object is encountered,\n\t// convert all of its `Date` string values to `Date`s,\n\t// and proceed recursively for all of its properties.\n\telse if (is_object(object))\n\t{\n\t\tfor (let key of Object.keys(object))\n\t\t{\n\t\t\t// proceed recursively\n\t\t\tobject[key] = parse_dates(object[key])\n\t\t}\n\t}\n\n\t// Dates have been converted for this JSON object\n\treturn object\n}"]}