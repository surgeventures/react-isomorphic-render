{"version":3,"sources":["../../source/redux/actions.js"],"names":["Redirect","GoTo","Navigated","Preload","LoadState","redirect_action","preload_action","location","goto_action","navigated_action","type","redirect","navigate","initial_client_side_preload","instant_back","initial","history_redirect_action","history_goto_action","load_state_action","state"],"mappings":";;;;;;;AAAA;;AAEO,IAAMA,8BAAY,oCAAlB;AACA,IAAMC,sBAAY,gCAAlB;AACA,IAAMC,gCAAY,qCAAlB;AACA,IAAMC,4BAAY,mCAAlB;AACA,IAAMC,gCAAY,+CAAlB;;AAEP;AACO,IAAMC,4CAAkB,SAAlBA,eAAkB;AAAA,QAAYC,eAAeC,QAAf,EAAyB,IAAzB,CAAZ;AAAA,CAAxB;;AAEP;AACO,IAAMC,oCAAc,SAAdA,WAAc;AAAA,QAAYF,eAAeC,QAAf,CAAZ;AAAA,CAApB;;AAEP;AACO,IAAME,8CAAmB,SAAnBA,gBAAmB,CAACF,QAAD;AAAA,QAC/B;AACAG,QAAMR,SADN;AAEAK,YAAU,8BAAeA,QAAf;AAFV,EAD+B;AAAA,CAAzB;;AAMP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,IAAMD,0CAAiB,SAAjBA,cAAiB,CAACC,QAAD,EAAWI,QAAX;AAAA,KAAqBC,QAArB,uEAAgC,IAAhC;AAAA,KAAsCC,2BAAtC;AAAA,KAAmEC,YAAnE;AAAA,QAC7B;AACAJ,QAAMP,OADN;AAEAI,YAAU,8BAAeA,QAAf,CAFV;AAGAI,oBAHA;AAIAC,oBAJA;AAKAG,WAASF,2BALT;AAMAC;AANA,EAD6B;AAAA,CAAvB;;AAUP;AACO,IAAME,4DAA0B,SAA1BA,uBAA0B,CAACT,QAAD;AAAA,QACtC;AACAG,QAAMV,QADN;AAEAO,YAAU,8BAAeA,QAAf;AAFV,EADsC;AAAA,CAAhC;;AAMP;AACO,IAAMU,oDAAsB,SAAtBA,mBAAsB,CAACV,QAAD;AAAA,QAClC;AACAG,QAAMT,IADN;AAEAM,YAAU,8BAAeA,QAAf;AAFV,EADkC;AAAA,CAA5B;;AAMP;AACO,IAAMW,gDAAoB,SAApBA,iBAAoB,CAACC,KAAD;AAAA,QAChC;AACAT,QAAMN,SADN;AAEAe;AAFA,EADgC;AAAA,CAA1B","file":"actions.js","sourcesContent":["import { parse_location } from '../location'\n\nexport const Redirect  = '@@react-isomorphic-render/redirect'\nexport const GoTo      = '@@react-isomorphic-render/goto'\nexport const Navigated = '@@react-isomorphic-render/navigated'\nexport const Preload   = '@@react-isomorphic-render/preload'\nexport const LoadState = '@@react-isomorphic-render/redux/state/replace'\n\n// Before page preloading started\nexport const redirect_action = location => preload_action(location, true)\n\n// Before page preloading started\nexport const goto_action = location => preload_action(location)\n\n// After page preloading finished\nexport const navigated_action = (location) =>\n({\n\ttype: Navigated,\n\tlocation: parse_location(location)\n})\n\n// Starts `location` page preloading.\n//\n// If `redirect` is `true` then will perform\n// `history.replace()` instead of `history.push()`.\n//\n// If `navigate` is `false` then the actual navigation won't take place.\n// This is used for the server side.\n//\n// If `initial_client_side_preload` is `true`\n// then just client-side-only `@preload()`s will be executed.\n//\nexport const preload_action = (location, redirect, navigate = true, initial_client_side_preload, instant_back) =>\n({\n\ttype: Preload,\n\tlocation: parse_location(location),\n\tredirect,\n\tnavigate,\n\tinitial: initial_client_side_preload,\n\tinstant_back\n})\n\n// After page preloading finished\nexport const history_redirect_action = (location) =>\n({\n\ttype: Redirect,\n\tlocation: parse_location(location)\n})\n\n// After page preloading finished\nexport const history_goto_action = (location) =>\n({\n\ttype: GoTo,\n\tlocation: parse_location(location)\n})\n\n// Replaces Redux state (e.g. for instant \"Back\" button feature)\nexport const load_state_action = (state) =>\n({\n\ttype: LoadState,\n\tstate\n})"]}