{"version":3,"sources":["../../source/redux/authorize.js"],"names":["authorized_route","get_user","authorization","Wrapped","Authorized","props","displayName","get_display_name","preload","authorize_then_preload","parameters","getState","error","check_privileges","throw_error","resolve","user","name","error_code","Error","status"],"mappings":";;;;;;;;;;kBAgBwBA,gB;;AAhBxB;;;;AACA;;;;AAEA;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAASA,gBAAT,CAA0BC,QAA1B,EAAoCC,aAApC,EAAmDC,OAAnD,EACf;AACC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,UAASC,UAAT,CAAoBC,KAApB,EACA;AACC,SAAO,8BAAC,OAAD,EAAcA,KAAd,CAAP;AACA;;AAEDD,YAAWE,WAAX,kBAAsCC,iBAAiBJ,OAAjB,CAAtC;;AAEA,qCAAcC,UAAd,EAA0BD,OAA1B;;AAEA,KAAMK,UAAUJ,qDAAhB;;AAEA;AACA;AACA;AACA;AACA;AACAA,yDAAkC,SAASK,sBAAT,CAAgCC,UAAhC,EAClC;AAAA,MACSC,QADT,GACsBD,UADtB,CACSC,QADT;;;AAGC,MAAMC,QAAQC,iBAAiBZ,SAASU,UAAT,CAAjB,EAAuCT,aAAvC,CAAd;;AAEA,MAAIU,KAAJ,EACA;AACCE,eAAYF,KAAZ;AACA;;AAED,SAAOJ,UAAUA,QAAQE,UAAR,CAAV,GAAgC,kBAAQK,OAAR,EAAvC;AACA,EAZD;;AAcA,QAAOX,UAAP;AACA;;AAED,SAASS,gBAAT,CAA0BG,IAA1B,EAAgCd,aAAhC,EACA;AACC;AACA,KAAI,CAACc,IAAL,EACA;AACC;AACA;AACA,SAAO,iBAAP;AACA;;AAED;AACA;AACA,KAAI,CAACd,aAAL,EACA;AACC;AACA;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAI,OAAOA,aAAP,KAAyB,UAA7B,EACA;AACC;AACA;AACA,MAAIA,cAAcc,IAAd,CAAJ,EACA;AACC;AACA;AACD;;AAED;AACA;AACA,QAAO,cAAP;AACA;;AAED,SAAST,gBAAT,CAA0BJ,OAA1B,EACA;AACC,QAAOA,QAAQG,WAAR,IAAuBH,QAAQc,IAA/B,IAAuC,WAA9C;AACA;;AAED,SAASH,WAAT,CAAqBI,UAArB,EACA;AACC,KAAMN,QAAQ,IAAIO,KAAJ,CAAUD,UAAV,CAAd;AACAN,OAAMQ,MAAN,GAAeF,eAAe,iBAAf,GAAmC,GAAnC,GAAyC,GAAxD;AACA,OAAMN,KAAN;AACA","file":"authorize.js","sourcesContent":["import React, { Component } from 'react'\nimport hoist_statics  from 'hoist-non-react-statics'\n\nimport { Preload_method_name } from './middleware/preloading middleware'\n\n// This decorator is supposed to be used in conjunction with `settings.catch`,\n// because this component will emit either Status 401 Unauthenticated\n// or Status 403 Unauthorized if the authorization fails\n// which is supposed to be then caught in `settings.catch`\n// for further redirection to a corresponding error page.\n//\n// `get_user(state)` gets a `user` object from Redux state.\n// `authorization` is either a String `user.role`,\n// or an array of all possible `user.role`s,\n// or a function of `user` returning `true`/`false`.\n//\nexport default function authorized_route(get_user, authorization, Wrapped)\n{\n\t// class Authorized extends Component\n\t// {\n\t// \trender()\n\t// \t{\n\t// \t\treturn <Wrapped { ...this.props }/>\n\t// \t}\n\t// }\n\n\tfunction Authorized(props)\n\t{\n\t\treturn <Wrapped { ...props }/>\n\t}\n\n\tAuthorized.displayName = `Authorize(${get_display_name(Wrapped)})`\n\n\thoist_statics(Authorized, Wrapped)\n\n\tconst preload = Authorized[Preload_method_name]\n\n\t// On the client side the redirection\n\t// will be made in `componentWillMount()`.\n\t// On the server side `component` won't neccessarily mount\n\t// and won't neccessarily be created (e.g. when SSR is turned off)\n\t// therefore must perform the check in `@preload()`.\n\tAuthorized[Preload_method_name] = function authorize_then_preload(parameters)\n\t{\n\t\tconst { getState } = parameters\n\n\t\tconst error = check_privileges(get_user(getState()), authorization)\n\n\t\tif (error)\n\t\t{\n\t\t\tthrow_error(error)\n\t\t}\n\n\t\treturn preload ? preload(parameters) : Promise.resolve()\n\t}\n\n\treturn Authorized\n}\n\nfunction check_privileges(user, authorization)\n{\n\t// Ensure that the user has signed id\n\tif (!user)\n\t{\n\t\t// not authenticated.\n\t\t// redirect the user to the \"unauthenticated\" page\n\t\treturn 'unauthenticated'\n\t}\n\n\t// If no further authorization is required,\n\t// then show the requested page\n\tif (!authorization)\n\t{\n\t\treturn\n\t}\n\n\t// // Normalize `authorization`\n\t// if (typeof authorization === 'string')\n\t// {\n\t// \tauthorization = [authorization]\n\t// }\n\t//\n\t// // If the passed parameter is a list of roles,\n\t// // at least one of which is required to view the page\n\t// if (Array.isArray(authorization))\n\t// {\n\t// \t// if the user has one of the required roles,\n\t// \t// then show the page\n\t// \tfor (let role of authorization)\n\t// \t{\n\t// \t\tif (user.role === role)\n\t// \t\t{\n\t// \t\t\treturn\n\t// \t\t}\n\t// \t}\n\t// }\n\n\t// If the passed parameter is a function then evaluate it\n\tif (typeof authorization === 'function')\n\t{\n\t\t// If the authorization passes,\n\t\t// then show the page\n\t\tif (authorization(user))\n\t\t{\n\t\t\treturn\n\t\t}\n\t}\n\n\t// authorization not passed.\n\t// redirect the user to the \"unauthorized\" page\n\treturn 'unauthorized'\n}\n\nfunction get_display_name(Wrapped)\n{\n\treturn Wrapped.displayName || Wrapped.name || 'Component'\n}\n\nfunction throw_error(error_code)\n{\n\tconst error = new Error(error_code)\n\terror.status = error_code === 'unauthenticated' ? 401 : 403\n\tthrow error\n}"]}