{"version":3,"sources":["../../../source/redux/client/client.js"],"names":["set_up_and_render","getState","getHttpClient","settings","options","devtools","translation","stats","on_navigate","onNavigate","store","http_client","window","_react_isomorphic_render_http_client","listener","event","location","from_location","get_current_location","to_location","key","state","undefined","dispatch","then","result","error","console","history","get_history","onStoreCreated","document","current_location","getCurrentLocation","listen","wrapper","render","render_parameters","routes","erase","_redux_state"],"mappings":"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","file":"client.js","sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport client_side_render, { should_instrument_history_pop_state_listeners, create_history, get_protected_cookie_value } from '../../client'\nimport render from './render'\nimport create_http_client from '../http client'\nimport normalize_common_settings from '../normalize'\nimport create_store from '../store'\nimport { preload_action } from '../actions'\n// import { load_state_action } from '../actions'\nimport { is_instant_transition, reset_instant_back } from './instant back'\nimport { location_url } from '../../location'\n\n// This function is what's gonna be called from the project's code on the client-side.\nexport default function set_up_and_render(settings, options = {})\n{\n\tsettings = normalize_common_settings(settings)\n\n\tconst { devtools, translation, stats } = options\n\t\n\t// camelCase aliasing\n\tconst on_navigate = options.on_navigate || options.onNavigate\n\n\t// Redux store (is used in history `popstate` listener)\n\tlet store\n\n\t// Create HTTP client (Redux action creator `http` utility)\n\tconst http_client = create_http_client(settings, () => store, get_protected_cookie_value())\n\t// E.g. for WebSocket message handlers, since they only run on the client side.\n\twindow._react_isomorphic_render_http_client = http_client\n\n\t// Reset \"instant back\" on page reload\n\t// since Redux state is cleared.\n\treset_instant_back()\n\n\t// Will intercept `popstate` DOM event to preload pages before showing them.\n\t// This hook is placed before `history` is initialized because it taps on `popstate`.\n\tshould_instrument_history_pop_state_listeners((listener, event, location) =>\n\t{\n\t\t// This idea was discarded because state JSON could be very large.\n\t\t// // Store the current Redux state in history\n\t\t// // before performing the \"Back\"/\"Forward\" navigation.\n\t\t// store_in_history('redux/state', get_current_location().key, store.getState())\n\t\t//\n\t\t// const redux_state = get_from_history('redux/state', event.state.key)\n\t\t//\n\t\t// if (redux_state)\n\t\t// {\n\t\t// \t// Won't preload the page again but will instead use\n\t\t// \t// the Redux state that was relevant at the time\n\t\t// \t// the page was navigated from.\n\t\t// \tstore.dispatch(load_state_action(redux_state))\n\t\t//\n\t\t// \t// Navigate to the page\n\t\t// \tlistener(event)\n\t\t// \treturn\n\t\t// }\n\n\t\t// \"from location\" means before the `popstate` transition.\n\t\tconst from_location = get_current_location()\n\t\tconst to_location   = { key: event.state ? event.state.key : undefined }\n\n\t\t// If it's an instant \"Back\"/\"Forward\" navigation\n\t\tif (is_instant_transition(from_location, to_location))\n\t\t{\n\t\t\t// Navigate to the page without preloading it\n\t\t\t// (has been previously preloaded and is in Redux state)\n\t\t\treturn listener(event)\n\t\t}\n\n\t\t// Preload the page but don't navigate to it just yet\n\t\tstore.dispatch(preload_action(location, undefined, false)).then((result) =>\n\t\t{\n\t\t\t// Navigate to the page\n\t\t\tlistener(event)\n\t\t},\n\t\t(error) =>\n\t\t{\n\t\t\t// Log the error\n\t\t\tconsole.error(error)\n\t\t})\n\t})\n\n\t// `history` is created after the `store`.\n\t// At the same time, `store` needs the `history` later during navigation.\n\t// And `history` might need store for things like `react-router-redux`.\n\t// Hence the getter instead of a simple variable\n\tlet history\n\tconst get_history = () => history\n\n\t// Create Redux store\n\tstore = create_store(settings, getState(true), get_history, http_client,\n\t{\n\t\tdevtools,\n\t\tstats,\n\t\ton_navigate\n\t})\n\n\t// For example, client-side-only applications\n\t// may capture this `store` as `window.store`\n\t// to call `bindActionCreators()` for all actions (globally).\n\t//\n\t// onStoreCreated: store => window.store = store\n\t//\n\t// import { bindActionCreators } from 'redux'\n\t// import actionCreators from './actions'\n\t// const boundActionCreators = bindActionCreators(actionCreators, window.store.dispatch)\n\t// export default boundActionCreators\n\t//\n\tif (options.onStoreCreated)\n\t{\n\t\toptions.onStoreCreated(store)\n\t}\n\n\t// Create `react-router` `history`\n\thistory = create_history(document.location, settings.history, { store })\n\n\t// When `popstate` event listener is fired,\n\t// `history.getCurrentLocation()` is already\n\t// the `pop`ped one (for some unknown reason),\n\t// therefore the \"previous location\" could be obtained\n\t// using this listener.\n\n\tlet current_location = history.getCurrentLocation()\n\tconst get_current_location = () => current_location\n\t\n\thistory.listen((location) =>\n\t{\n\t\tcurrent_location = location\n\t})\n\n\t// Call `onNavigate` on initial page load\n\tif (on_navigate)\n\t{\n\t\ton_navigate(location_url(current_location), current_location)\n\t}\n\n\t// Render the page\n\treturn client_side_render\n\t({\n\t\ttranslation,\n\t\twrapper: settings.wrapper,\n\t\trender,\n\t\trender_parameters:\n\t\t{\n\t\t\thistory,\n\t\t\troutes: settings.routes,\n\t\t\tstore,\n\t\t\tdevtools\n\t\t}\n\t})\n\t.then((result) =>\n\t{\n\t\t// Execute all client-side-only `@preload()`s.\n\t\treturn store.dispatch(preload_action(current_location, undefined, false, true)).then(() => result)\n\t})\n}\n\n// Gets Redux store state before \"rehydration\".\n// In case someone needs to somehow modify\n// Redux state before client-side render.\n// (because the variable could be potentially renamed in future)\nexport function getState(erase)\n{\n\tconst state = window._redux_state\n\n\tif (erase)\n\t{\n\t\tdelete window._redux_state\n\t}\n\n\treturn state\n}\n\n// Returns `http` utility on the client side.\n// Can be used in WebSocket message handlers,\n// since they only run on the client side.\nexport function getHttpClient()\n{\n\treturn window._react_isomorphic_render_http_client\n}"]}