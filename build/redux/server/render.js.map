{"version":3,"sources":["../../../source/redux/server/render.js"],"names":["render_on_server","timed_react_render_on_server","named_arguments","render_timer","markup","result","content","time","history","disable_server_side_rendering","create_page_element","render_webpage","store","routes","before_render","then","redirect","router_state","http_status_code","get_http_response_status_code_for_the_route","route","preload_timer","dispatch","preload","rendered","render","page_element","status","catch","error","_redirect","matched_routes","reduce","previous","current"],"mappings":";;;;;kBAyBwBA,gB;;AAzBxB;;;;AACA;;AAEA;;;;AACA;;AACA;;AACA;;;;AACA;;AACA;;;;AACA;;;;;;AAEA,SAASC,4BAAT,CAAsCC,eAAtC,EACA;AACC,KAAMC,eAAe,sBAArB;AACA,KAAMC,SAAS,8BAAuBF,eAAvB,CAAf;AACA,KAAMG,SACN;AACCC,WAAUF,MADX;AAECG,QAAUJ;AAFX,EADA;AAKA,QAAOE,MAAP;AACA;;AAED;AACA;AACe,SAASL,gBAAT,OACf;AAAA,KAD2CQ,OAC3C,QAD2CA,OAC3C;AAAA,KADoDC,6BACpD,QADoDA,6BACpD;AAAA,KADmFC,mBACnF,QADmFA,mBACnF;AAAA,KADwGC,cACxG,QADwGA,cACxG;AAAA,KADwHC,KACxH,QADwHA,KACxH;AAAA,KAD+HC,MAC/H,QAD+HA,MAC/H;AAAA,KADuIC,aACvI,QADuIA,aACvI;;AACC;AACA;;AAEA;AACA,QAAO,qBACN;AACAN,kBADA;AAEAK;AAFA,EADM,EAKNE,IALM,CAKD,iBACN;AAAA,MADSC,QACT,SADSA,QACT;AAAA,MADmBC,YACnB,SADmBA,YACnB;;AACC;;AAEA;AACA,MAAID,QAAJ,EACA;AACC,UAAO,EAAEA,kBAAF,EAAP;AACA;;AAED;AACA,MAAME,mBAAmBC,4CAA4CF,aAAaJ,MAAzD,CAAzB;;AAEA;AACA;AACA,MAAMO,QAAQ,4BAAeH,YAAf,CAAd;;AAEA;AACA,MAAMV,OAAO,EAAb;;AAEA,MAAMc,gBAAgB,sBAAtB;;AAEA;AACA,SAAOT,MAAMU,QAAN,CAAe,6BAAe,2BAAad,OAAb,CAAf,CAAf,EAAsDO,IAAtD,CAA2D,YAClE;AACCR,QAAKgB,OAAL,GAAeF,eAAf;;AAEA,OAAIP,aAAJ,EACA;AACC,WAAOA,cAAcF,KAAd,CAAP;AACA;AACD,GARM,EASNG,IATM,CASD,YACN;AACC,OAAIN,6BAAJ,EACA;AACC;AACA,QAAMe,YAAWvB,6BAA6B,EAAEU,8BAAF,EAA7B,CAAjB;AACAJ,SAAKkB,MAAL,GAAcD,UAASjB,IAAvB;;AAEA;AACA,WAAO,EAAED,SAASkB,UAASlB,OAApB,EAA6Bc,YAA7B,EAAoCb,UAApC,EAAP;AACA;;AAED;AACA;AACA,OAAMmB,eAAehB,oBAAoB,mDAAaO,YAAb,CAApB,EAAmD,EAAEL,YAAF,EAAnD,CAArB;;AAEA;AACA,OAAMY,WAAWvB,6BAA6B,EAAEU,8BAAF,EAAkBe,0BAAlB,EAA7B,CAAjB;;AAEA;AACA;AACA;AACAnB,QAAKkB,MAAL,GAAcD,SAASjB,IAAvB;;AAEA;AACA,UAAO,EAAEoB,QAAQT,gBAAV,EAA4BZ,SAASkB,SAASlB,OAA9C,EAAuDc,YAAvD,EAA8Db,UAA9D,EAAP;AACA,GAnCM,CAAP;AAoCA,EAhEM,EAiENqB,KAjEM,CAiEA,UAACC,KAAD,EACP;AACC;AACA;AACA,MAAIA,MAAMC,SAAV,EACA;AACC,UAAO,EAAEd,UAAUa,MAAMC,SAAlB,EAAP;AACA;;AAED;AACA,QAAMD,KAAN;AACA,EA5EM,CAAP;AA6EA;;AAED;AACA;AACA,SAASV,2CAAT,CAAqDY,cAArD,EACA;AACC,QAAOA,eAAeC,MAAf,CAAsB,UAACC,QAAD,EAAWC,OAAX;AAAA,SAAwBA,WAAWA,QAAQP,MAApB,IAAgCM,YAAYC,QAAQP,MAA3E;AAAA,EAAtB,CAAP;AACA","file":"render.js","sourcesContent":["import React from 'react'\nimport { Router } from 'react-router'\n\nimport react_render_on_server from '../../render on server'\nimport { location_url } from '../../location'\nimport { get_location } from '../../history'\nimport timer from '../../timer'\nimport { preload_action } from '../actions'\nimport match_routes_against_location from '../../react-router/match'\nimport get_route_path from '../../react-router/get route path'\n\nfunction timed_react_render_on_server(named_arguments)\n{\n\tconst render_timer = timer()\n\tconst markup = react_render_on_server(named_arguments)\n\tconst result =\n\t{\n\t\tcontent : markup,\n\t\ttime    : render_timer()\n\t}\n\treturn result\n}\n\n// Returns a Promise resolving to { status, content, redirect }.\n//\nexport default function render_on_server({ history, disable_server_side_rendering, create_page_element, render_webpage, store, routes, before_render })\n{\n\t// Routing only takes a couple of milliseconds\n\t// const routing_timer = timer()\n\n\t// Perform routing for this URL\n\treturn match_routes_against_location\n\t({\n\t\thistory,\n\t\troutes\n\t})\n\t.then(({ redirect, router_state }) =>\n\t{\n\t\t// routing_timer()\n\n\t\t// In case of a `react-router` `<Redirect/>`\n\t\tif (redirect)\n\t\t{\n\t\t\treturn { redirect }\n\t\t}\n\n\t\t// Http response status code\n\t\tconst http_status_code = get_http_response_status_code_for_the_route(router_state.routes)\n\n\t\t// Concatenated `react-router` route string.\n\t\t// E.g. \"/user/:user_id/post/:post_id\"\n\t\tconst route = get_route_path(router_state)\n\n\t\t// Profiling\n\t\tconst time = {}\n\n\t\tconst preload_timer = timer()\n\n\t\t// After the page has finished preloading, render it\n\t\treturn store.dispatch(preload_action(get_location(history))).then(() =>\n\t\t{\n\t\t\ttime.preload = preload_timer()\n\n\t\t\tif (before_render)\n\t\t\t{\n\t\t\t\treturn before_render(store)\n\t\t\t}\n\t\t})\n\t\t.then(() =>\n\t\t{\n\t\t\tif (disable_server_side_rendering)\n\t\t\t{\n\t\t\t\t// Render the empty <Html/> component into Html markup string\n\t\t\t\tconst rendered = timed_react_render_on_server({ render_webpage })\n\t\t\t\ttime.render = rendered.time\n\n\t\t\t\t// return  HTML markup\n\t\t\t\treturn { content: rendered.content, route, time }\n\t\t\t}\n\n\t\t\t// Renders the current page React component to a React element.\n\t\t\t// Passing `store` as part of `props` to the `wrapper`.\n\t\t\tconst page_element = create_page_element(<Router { ...router_state }/>, { store })\n\n\t\t\t// Render the current page's React element to HTML markup\n\t\t\tconst rendered = timed_react_render_on_server({ render_webpage, page_element })\n\n\t\t\t// Rendering a complex React page (having more than 1000 components)\n\t\t\t// takes about 100ms (`time.render`).\n\t\t\t// This is quite slow but that's how React Server Side Rendering currently is.\n\t\t\ttime.render = rendered.time\n\n\t\t\t// return HTTP status code and HTML markup\n\t\t\treturn { status: http_status_code, content: rendered.content, route, time }\n\t\t})\n\t})\n\t.catch((error) =>\n\t{\n\t\t// If an HTTP redirect is required, then abort all further actions.\n\t\t// That's a hacky way to implement redirects but it seems to work.\n\t\tif (error._redirect)\n\t\t{\n\t\t\treturn { redirect: error._redirect }\n\t\t}\n\n\t\t// Otherwise, throw this error up the call stack.\n\t\tthrow error\n\t})\n}\n\n// One can set a `status` prop for a react-router `Route`\n// to be returned as an Http response status code (404, etc)\nfunction get_http_response_status_code_for_the_route(matched_routes)\n{\n\treturn matched_routes.reduce((previous, current) => (current && current.status) || (previous && current.status))\n}"]}