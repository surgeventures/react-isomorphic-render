{"version":3,"sources":["../source/location.js"],"names":["location_url","parse_location","strip_basename","location","options","origin","pathname","search","hash","basename","pathname_starts_at","indexOf","length","slice","search_index","hash_index","starts_with_basename","toLowerCase","substring"],"mappings":";;;;;;;;;;QAIgBA,Y,GAAAA,Y;QAmBAC,c,GAAAA,c;QAwDAC,c,GAAAA,c;;;;AA/EhB;AACA;AACA;;AAEO,SAASF,YAAT,CAAsBG,QAAtB,EACP;AAAA,KADuCC,OACvC,uEADiD,EACjD;;AACC,KAAI,OAAOD,QAAP,KAAoB,QAAxB,EACA;AACC,SAAOA,QAAP;AACA;;AAED,KAAME,SAAWF,SAASE,MAAT,IAAqB,EAAtC;AACA,KAAMC,WAAWH,SAASG,QAA1B;AACA,KAAMC,SAAWJ,SAASI,MAAT,IAAqB,EAAtC;AACA,KAAMC,OAAWL,SAASK,IAAT,IAAqB,EAAtC;;AAEA;AACA,KAAMC,WAAY,CAACJ,MAAD,IAAWD,QAAQK,QAApB,GAAgCL,QAAQK,QAAxC,GAAmD,EAApE;;AAEA,aAAUJ,MAAV,GAAmBI,QAAnB,GAA8BH,QAA9B,GAAyCC,MAAzC,GAAkDC,IAAlD;AACA;;AAED;AACO,SAASP,cAAT,CAAwBE,QAAxB,EACP;AACC,KAAI,OAAOA,QAAP,KAAoB,QAAxB,EACA;AACC,SAAOA,QAAP;AACA;;AAED,KAAIE,eAAJ;AACA,KAAIC,iBAAJ;;AAEA,KAAIH,aAAa,EAAjB,EACA;AACCG,aAAW,GAAX;AACA,EAHD,MAIK,IAAIH,SAAS,CAAT,MAAgB,GAApB,EACL;AACCG,aAAWH,QAAX;AACA,EAHI,MAKL;AACC,MAAMO,qBAAqBP,SAASQ,OAAT,CAAiB,GAAjB,EAAsBR,SAASQ,OAAT,CAAiB,IAAjB,IAAyB,KAAKC,MAApD,CAA3B;;AAEA,MAAIF,qBAAqB,CAAzB,EACA;AACCL,YAAWF,SAASU,KAAT,CAAe,CAAf,EAAkBH,kBAAlB,CAAX;AACAJ,cAAWH,SAASU,KAAT,CAAeH,kBAAf,CAAX;AACA,GAJD,MAMA;AACCL,YAAWF,QAAX;AACAG,cAAW,GAAX;AACA;AACD;;AAED,KAAIC,SAAS,EAAb;AACA,KAAIC,OAAO,EAAX;;AAEA,KAAMM,eAAeR,SAASK,OAAT,CAAiB,GAAjB,CAArB;AACA,KAAIG,gBAAgB,CAApB,EACA;AACCP,WAAWD,SAASO,KAAT,CAAeC,YAAf,CAAX;AACAR,aAAWA,SAASO,KAAT,CAAe,CAAf,EAAkBC,YAAlB,CAAX;AACA;;AAED,KAAMC,aAAaR,OAAOI,OAAP,CAAe,GAAf,CAAnB;AACA,KAAII,cAAc,CAAlB,EACA;AACCP,SAASD,OAAOM,KAAP,CAAaE,UAAb,CAAT;AACAR,WAASA,OAAOM,KAAP,CAAa,CAAb,EAAgBE,UAAhB,CAAT;AACA;;AAED,QAAO,EAAEV,cAAF,EAAUC,kBAAV,EAAoBC,cAApB,EAA4BC,UAA5B,EAAP;AACA;;AAED;AACA;AACO,SAASN,cAAT,CAAwBC,QAAxB,EAAkCM,QAAlC,EACP;AACC,KAAI,CAACN,QAAL,EACA;AACC,SAAOA,QAAP;AACA;;AAED,KAAIM,YAAY,OAAON,SAASM,QAAhB,KAA6B,QAA7C,EACA;AACC,MAAMO,uBAAuBb,SAASG,QAAT,CAAkBW,WAAlB,GAAgCN,OAAhC,CAAwCF,SAASQ,WAAT,EAAxC,MAAoE,CAAjG;;AAEAd,wCAEIA,QAFJ;AAGCM,qBAHD;AAIC;AACAH,aAAUU,uBAAwBb,SAASG,QAAT,CAAkBY,SAAlB,CAA4BT,SAASG,MAArC,KAAgD,GAAxE,GAA+ET,SAASG;AALnG;AAOA;;AAED,QAAOH,QAAP;AACA","file":"location.js","sourcesContent":["// Not part of package.json\n// import querystring from 'query-string'\n// import deep_equal from 'deep-equal'\n\nexport function location_url(location, options = {})\n{\n\tif (typeof location === 'string')\n\t{\n\t\treturn location\n\t}\n\n\tconst origin   = location.origin   || ''\n\tconst pathname = location.pathname\n\tconst search   = location.search   || ''\n\tconst hash     = location.hash     || ''\n\t\n\t// Append `basename` only to relative URLs\n\tconst basename = (!origin && options.basename) ? options.basename : ''\n\n\treturn `${origin}${basename}${pathname}${search}${hash}`\n}\n\n// Doesn't construct `query` though\nexport function parse_location(location)\n{\n\tif (typeof location !== 'string')\n\t{\n\t\treturn location\n\t}\n\n\tlet origin\n\tlet pathname\n\n\tif (location === '')\n\t{\n\t\tpathname = '/'\n\t}\n\telse if (location[0] === '/')\n\t{\n\t\tpathname = location\n\t}\n\telse\n\t{\n\t\tconst pathname_starts_at = location.indexOf('/', location.indexOf('//') + '//'.length)\n\n\t\tif (pathname_starts_at > 0)\n\t\t{\n\t\t\torigin   = location.slice(0, pathname_starts_at)\n\t\t\tpathname = location.slice(pathname_starts_at)\n\t\t}\n\t\telse\n\t\t{\n\t\t\torigin   = location\n\t\t\tpathname = '/'\n\t\t}\n\t}\n\n\tlet search = ''\n\tlet hash = ''\n\n\tconst search_index = pathname.indexOf('?')\n\tif (search_index >= 0)\n\t{\n\t\tsearch   = pathname.slice(search_index)\n\t\tpathname = pathname.slice(0, search_index)\n\t}\n\n\tconst hash_index = search.indexOf('#')\n\tif (hash_index >= 0)\n\t{\n\t\thash   = search.slice(hash_index)\n\t\tsearch = search.slice(0, hash_index)\n\t}\n\n\treturn { origin, pathname, search, hash }\n}\n\n// Copy-pasted `addBasename()` (wrong name) function from `history`:\n// https://github.com/ReactTraining/history/blob/v3/modules/useBasename.js\nexport function strip_basename(location, basename)\n{\n\tif (!location)\n\t{\n\t\treturn location\n\t}\n\n\tif (basename && typeof location.basename !== 'string')\n\t{\n\t\tconst starts_with_basename = location.pathname.toLowerCase().indexOf(basename.toLowerCase()) === 0\n\n\t\tlocation =\n\t\t{\n\t\t\t...location,\n\t\t\tbasename,\n\t\t\t// If `location.pathname` starts with `basename` then strip it\n\t\t\tpathname: starts_with_basename ? (location.pathname.substring(basename.length) || '/') : location.pathname\n\t\t}\n\t}\n\n\treturn location\n}"]}