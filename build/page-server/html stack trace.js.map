{"version":3,"sources":["../../source/page-server/html stack trace.js"],"names":["render_stack_trace","error","options","html","response_status","status","response_body","response","headers","split","trim","message","stack_trace","stack","original","console"],"mappings":";;;;;kBAEwBA,kB;;AAFxB;;AAEe,SAASA,kBAAT,CAA4BC,KAA5B,EAAmCC,OAAnC,EACf;AACC;AACA,KAAID,MAAME,IAAV,EACA;AACC,SAAO,EAAEC,iBAAiBH,MAAMI,MAAzB,EAAiCC,eAAeL,MAAME,IAAtD,EAAP;AACA;;AAED;AACA;AACA,KAAI,OAAOF,MAAMI,MAAb,KAAwB,QAA5B,EACA;AACC;AACA;AACA;AACA,MAAIJ,MAAMM,QAAN,IACAN,MAAMM,QAAN,CAAeC,OAAf,CAAuB,cAAvB,CADA,IAEAP,MAAMM,QAAN,CAAeC,OAAf,CAAuB,cAAvB,EAAuCC,KAAvC,CAA6C,GAA7C,EAAkD,CAAlD,EAAqDC,IAArD,OAAgE,WAFpE,EAGA;AACC,UAAO,EAAEN,iBAAiBH,MAAMI,MAAzB,EAAiCC,eAAeL,MAAMU,OAAtD,EAAP;AACA;AACD;;AAED;;AAEA,KAAIC,oBAAJ;;AAEA,KAAIX,MAAMY,KAAV,EACA;AACCD,gBAAcX,MAAMY,KAApB;AACA;AACD;AACA;AALA,MAMK,IAAIZ,MAAMa,QAAN,IAAkBb,MAAMa,QAAN,CAAeD,KAArC,EACL;AACCD,iBAAcX,MAAMa,QAAN,CAAeD,KAA7B;AACA;;AAED;AACA,KAAI,CAACD,WAAL,EACA;AACC,SAAO,EAAP;AACA;;AAED,KACA;AACC,SAAO,EAAEN,eAAe,sBAAiB,EAAEO,OAAOD,WAAT,EAAjB,EAAyCV,OAAzC,CAAjB,EAAP;AACA,EAHD,CAIA,OAAOD,KAAP,EACA;AACCc,UAAQd,KAAR,CAAcA,KAAd;AACA,SAAO,EAAEG,iBAAiB,GAAnB,EAAwBE,eAAeL,MAAMY,KAA7C,EAAP;AACA;AACD","file":"html stack trace.js","sourcesContent":["import { html as html_stack_trace } from 'print-error'\n\nexport default function render_stack_trace(error, options)\n{\n\t// Supports custom `html` for an error\n\tif (error.html)\n\t{\n\t\treturn { response_status: error.status, response_body: error.html }\n\t}\n\n\t// Handle `superagent` errors: if an error response was an html, then just render it\n\t// https://github.com/visionmedia/superagent/blob/29ca1fc938b974c6623d9040a044e39dfb272fed/lib/node/response.js#L106\n\tif (typeof error.status === 'number')\n\t{\n\t\t// If the `superagent` http request returned an html response \n\t\t// (possibly an error stack trace),\n\t\t// then just output that stack trace\n\t\tif (error.response \n\t\t\t&& error.response.headers['content-type']\n\t\t\t&& error.response.headers['content-type'].split(';')[0].trim() === 'text/html')\n\t\t{\n\t\t\treturn { response_status: error.status, response_body: error.message }\n\t\t}\n\t}\n\n\t// If this error has a stack trace then it can be shown\n\n\tlet stack_trace\n\n\tif (error.stack)\n\t{\n\t\tstack_trace = error.stack\n\t}\n\t// `superagent` errors have the `original` property \n\t// for storing the initial error\n\telse if (error.original && error.original.stack)\n\t{\n\t\tstack_trace = error.original.stack\n\t}\n\n\t// If this error doesn't have a stack trace - do nothing\n\tif (!stack_trace)\n\t{\n\t\treturn {}\n\t}\n\n\ttry\n\t{\n\t\treturn { response_body: html_stack_trace({ stack: stack_trace }, options) }\n\t}\n\tcatch (error)\n\t{\n\t\tconsole.error(error)\n\t\treturn { response_status: 500, response_body: error.stack }\n\t}\n}"]}