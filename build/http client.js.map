{"version":3,"sources":["../source/http client.js"],"names":["http_client","options","set_cookies","secure","host","port","headers","clone_request","cookies","protected_cookie","protected_cookie_value","authentication_token_header","on_before_send","catch_to_retry","get_access_token","parse_json_dates","parse_dates","format_url","bind","server","cookies_raw","cookie","http_methods","getCookie","name","cookie_raw","indexOf","key_value","cookie_raw_key_value","split","get","agent","method","path","data","url","retry_count","perform_http_request","request","Http_request","new_cookies","add","add_authentication","authentication","is_relative_url","add_cookies","progress","resolve","reject","onCancel","send","then","version","abort","response","error","this","Error","protocol","has_binary_data","key","parameter","HTMLInputElement","FileList","Blob","construct_form_data","FormData","form_data","files","i","length","append","query","set","token","size","trim","map","join","on","event","direction","lengthComputable","percent","end","populate_error_data","statusCode","undefined","get_response_data","status","response_data","type","message","html","stack","JSON","parse","body","text","semicolon_index","slice"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAEA;;AACA;;;;AACA;;;;AAEA;AACA;AACA;IACqBA,W;;AAMpB;AACA;AACA;AACA,wBACA;AAAA;;AAAA,MADYC,OACZ,uEADsB,EACtB;AAAA;AAAA,OANAC,WAMA,GANc,mBAMd;AAAA,MAGEC,MAHF,GAgBGF,OAhBH,CAGEE,MAHF;AAAA,MAIEC,IAJF,GAgBGH,OAhBH,CAIEG,IAJF;AAAA,MAKEC,IALF,GAgBGJ,OAhBH,CAKEI,IALF;AAAA,MAMEC,OANF,GAgBGL,OAhBH,CAMEK,OANF;AAAA,MAOEC,aAPF,GAgBGN,OAhBH,CAOEM,aAPF;AAAA,MAQEC,OARF,GAgBGP,OAhBH,CAQEO,OARF;AAAA,MASEC,gBATF,GAgBGR,OAhBH,CASEQ,gBATF;AAAA,MAUEC,sBAVF,GAgBGT,OAhBH,CAUES,sBAVF;AAAA,MAWEC,2BAXF,GAgBGV,OAhBH,CAWEU,2BAXF;AAAA,MAYEC,cAZF,GAgBGX,OAhBH,CAYEW,cAZF;AAAA,MAaEC,cAbF,GAgBGZ,OAhBH,CAaEY,cAbF;AAAA,MAcEC,gBAdF,GAgBGb,OAhBH,CAcEa,gBAdF;;;AAkBC,MAAMC,mBAAmBd,QAAQe,WAAR,KAAwB,KAAjD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,aAAahB,QAAQgB,UAAR,IAAsB,KAAKA,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAzC;;AAEA;AACA;AACA,MAAIX,aAAJ,EACA;AACC,QAAKY,MAAL,GAAc,IAAd;AACA,QAAKC,WAAL,GAAmBb,cAAcD,OAAd,CAAsBe,MAAzC;AACA;;AAED,OAAKjB,IAAL,GAAYA,IAAZ;AACA,OAAKC,IAAL,GAAYA,QAAQ,EAApB;AACA,OAAKF,MAAL,GAAcA,MAAd;;AAEA,MAAMmB,eACN,CACC,KADD,EAEC,MAFD,EAGC,KAHD,EAIC,OAJD,EAKC,QALD,EAMC,MAND,EAOC,SAPD,CADA;;AAWA;AACA,MAAMC,YAAY,KAAKJ,MAAL,GAEjB,UAACK,IAAD,EACD;AACC;AADD;AAAA;AAAA;;AAAA;AAEC,oDAAyB,MAAKtB,WAA9B,4GACA;AAAA,SADWuB,UACX;;AACC,SAAIA,WAAWC,OAAX,CAAsBF,IAAtB,YAAmC,CAAvC,EACA;AACC,UAAMG,YAAYC,qBAAqBH,UAArB,EAAiCI,KAAjC,CAAuC,GAAvC,CAAlB;AACA,aAAOF,UAAU,CAAV,CAAP;AACA;AACD;;AAED;AAXD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAYC,UAAOnB,QAAQsB,GAAR,CAAYN,IAAZ,CAAP;AACA,GAhBiB,GAkBjB,UAACA,IAAD,EACD;AACC;AACA,OAAIA,SAASf,gBAAb,EACA;AACC,WAAOC,sBAAP;AACA;;AAED;AACA,UAAO,sCAAwBc,IAAxB,CAAP;AACA,GA5BD;;AA8BA;AACA;AACA,MAAMO,QAAQ,KAAKZ,MAAL,GAAc,qBAAWY,KAAX,EAAd,uBAAd;;AAEA;AApGD;AAAA;AAAA;;AAAA;AAAA;AAAA,QAqGUC,MArGV;;AAuGE,UAAKA,MAAL,IAAe,UAACC,IAAD,EAAOC,IAAP,EACf;AAAA,SAD4BjC,OAC5B,uEADsC,EACtC;;AACC;AACA,SAAMkC,MAAMlB,WAAWgB,IAAX,EAAiB,MAAKd,MAAtB,CAAZ;;AAEA;AACA,SAAIiB,cAAc,CAAC,CAAnB;;AAEA;AACA;AACA,SAAMC,uBAAuB,SAAvBA,oBAAuB,GAC7B;AACC;AACA,UAAMC,UAAU,IAAIC,YAAJ,CAAiBP,MAAjB,EAAyBG,GAAzB,EAA8BD,IAA9B,EAChB;AACCH,mBADD;AAEChB,yCAFD;AAGCT,2CAAeA,OAAf,EAA2BL,QAAQK,OAAnC,CAHD;AAICkC,oBAAc,qBAACA,YAAD,EACd;AACC,YAAI,MAAKrB,MAAT,EACA;AACC;AACA;AACA;AACA;AACA;AALD;AAAA;AAAA;;AAAA;AAMC,2DAAqBqB,YAArB,iHACA;AAAA,eADWnB,MACX;;AACC,iBAAKnB,WAAL,CAAiBuC,GAAjB,CAAqBpB,MAArB;AACA;AATF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUC;AACD;AAlBF,OADgB,CAAhB;;AAsBA;AACAiB,cAAQI,kBAAR,CAEC/B,2BAFD,EAGCV,QAAQ0C,cAHT,EAIC7B,gBAJD,EAKCS,SALD;;AAQA;AACA;AACA,UAAI,MAAKJ,MAAL,IAAeyB,gBAAgBX,IAAhB,CAAnB,EACA;AACCK,eAAQO,WAAR,CAAoB,MAAKzB,WAAzB,EAAsC,MAAKlB,WAA3C;AACA;;AAED;AACA;AACA,UAAIU,cAAJ,EACA;AACCA,sBAAe0B,QAAQA,OAAvB;AACA;;AAED;AACA;AACA,UAAIrC,QAAQ6C,QAAZ,EACA;AACCR,eAAQQ,QAAR,CAAiB7C,QAAQ6C,QAAzB;AACA;;AAED;AACA;AACA,aAAO,sBAAY,UAACC,OAAD,EAAUC,MAAV,EAAkBC,QAAlB,EACnB;AACC;AACAX,eAAQY,IAAR,GAAeC,IAAf,CAAoBJ,OAApB,EAA6BC,MAA7B;;AAEA;AACA;AACA;AACA,WAAI,kBAAQI,OAAR,IAAmBH,QAAvB,EACA;AACCA,iBAAS;AAAA,gBAAMX,QAAQA,OAAR,CAAgBe,KAAhB,EAAN;AAAA,SAAT;AACA;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAnBM,EAoBNF,IApBM,CAsBN,UAACG,QAAD;AAAA,cAAcA,QAAd;AAAA,OAtBM,EAuBN,UAACC,KAAD,EACA;AACC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAI1C,cAAJ,EACA;AACCuB;;AAEA,eAAOvB,eAAe0C,KAAf,EAAsBnB,WAAtB,EACP;AACCb,6BADD;AAECiC;AAFD,SADO,EAKNL,IALM,CAKDd,oBALC,CAAP;AAMA;;AAED;AACA,cAAO,kBAAQW,MAAR,CAAeO,KAAf,CAAP;AACA,OA7DK,CAAP;AA+DA,MAxHD;;AA0HA,YAAOlB,sBAAP;AACA,KArID;AAvGF;;AAqGC,oDAAmBf,YAAnB,iHACA;AAAA;AAuIC;AA7OF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA8OC;;AAED;AACA;;AAzPA;AACA;;;;;6BAyPWW,I,EAAMd,M,EACjB;AACC;AACA;AACA;AACA,OAAI,CAACyB,gBAAgBX,IAAhB,CAAL,EACA;AACC,UAAM,IAAIwB,KAAJ,0GAAiHxB,IAAjH,2HAAN;AACA;;AAED;AACA,OAAId,MAAJ,EACA;AACC,QAAMuC,WAAW,KAAKvD,MAAL,GAAc,OAAd,GAAwB,MAAzC;AACA,WAAUuD,QAAV,WAAwB,KAAKtD,IAA7B,SAAqC,KAAKC,IAA1C,GAAiD4B,IAAjD;AACA;;AAED,UAAOA,IAAP;AACA;;;;;kBA9QmBjC,W;;;AAiRrB,SAAS4C,eAAT,CAAyBX,IAAzB,EACA;AACC,QAAO,0BAAYA,IAAZ,EAAkB,GAAlB,KAA0B,CAAC,0BAAYA,IAAZ,EAAkB,IAAlB,CAAlC;AACA;;AAED,SAAS0B,eAAT,CAAyBzB,IAAzB,EACA;AAAA;AAAA;AAAA;;AAAA;AACC,mDAAgB,oBAAYA,IAAZ,CAAhB,iHACA;AAAA,OADS0B,GACT;;AACC,OAAMC,YAAY3B,KAAK0B,GAAL,CAAlB;;AAEA,OAAI,OAAOE,gBAAP,KAA4B,WAA5B,IAA2CD,qBAAqBC,gBAApE,EACA;AACC,WAAO,IAAP;AACA;;AAED,OAAI,OAAOC,QAAP,KAAoB,WAApB,IAAmCF,qBAAqBE,QAA5D,EACA;AACC,WAAO,IAAP;AACA;;AAED;AACA;AACA,OAAI,OAAOC,IAAP,KAAgB,WAAhB,IAA+BH,qBAAqBG,IAAxD,EACA;AACC,WAAO,IAAP;AACA;AACD;AArBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBC;;AAED,SAASC,mBAAT,CAA6B/B,IAA7B,EACA;AACC;AACA,KAAI,OAAOgC,QAAP,KAAoB,WAAxB,EACA;AACC;AACA,SAAOhC,IAAP;AACA;;AAED,KAAMiC,YAAY,IAAID,QAAJ,EAAlB;;AARD;AAAA;AAAA;;AAAA;AAUC,mDAAgB,oBAAYhC,IAAZ,CAAhB,iHACA;AAAA,OADS0B,GACT;;AACC,OAAIC,YAAY3B,KAAK0B,GAAL,CAAhB;;AAEA;AACA,OAAI,OAAOE,gBAAP,KAA4B,WAA5B,IAA2CD,qBAAqBC,gBAApE,EACA;AACCD,gBAAYA,UAAUO,KAAtB;AACA;;AAED;AACA;AACA;AACA,OAAI,OAAOL,QAAP,KAAoB,WAApB,IAAmCF,qBAAqBE,QAA5D,EACA;AACC,QAAIM,IAAI,CAAR;AACA,WAAOA,IAAIR,UAAUS,MAArB,EACA;AACCH,eAAUI,MAAV,CAAiBX,GAAjB,EAAsBC,UAAUQ,CAAV,CAAtB;AACAA;AACA;AACD;AACA;;AAEDF,aAAUI,MAAV,CAAiBX,GAAjB,EAAsBC,SAAtB;AACA;AAnCF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAqCC,QAAOM,SAAP;AACA;;IAEK5B,Y;AAEL,uBAAYP,MAAZ,EAAoBG,GAApB,EAAyBD,IAAzB,EAA+BjC,OAA/B,EACA;AAAA;AAAA,MACS8B,KADT,GAC2D9B,OAD3D,CACS8B,KADT;AAAA,MACgBzB,OADhB,GAC2DL,OAD3D,CACgBK,OADhB;AAAA,MACyBS,gBADzB,GAC2Dd,OAD3D,CACyBc,gBADzB;AAAA,MAC2CyB,WAD3C,GAC2DvC,OAD3D,CAC2CuC,WAD3C;;;AAGC,OAAKA,WAAL,GAAmBA,WAAnB;;AAEA;AACA,OAAKF,OAAL,GAAeP,MAAMC,MAAN,EAAcG,GAAd,CAAf;;AAEA;AACA,MAAID,IAAJ,EACA;AACC,WAAQF,MAAR;AAEC,SAAK,KAAL;AACC,UAAKM,OAAL,CAAakC,KAAb,CAAmBtC,IAAnB;AACA;;AAED,SAAK,MAAL;AACA,SAAK,KAAL;AACA,SAAK,OAAL;AACA,SAAK,MAAL;AACA,SAAK,SAAL;AACC,UAAKI,OAAL,CAAaY,IAAb,CAAkBS,gBAAgBzB,IAAhB,IAAwB+B,oBAAoB/B,IAApB,CAAxB,GAAoDA,IAAtE;AACA;;AAED,SAAK,QAAL;AACC,WAAM,IAAIuB,KAAJ,+CAAsD,yBAAevB,IAAf,CAAtD,CAAN;;AAED;AACC,WAAM,IAAIuB,KAAJ,2BAAkCzB,MAAlC,CAAN;AAlBF;AAoBA;;AAED;AACA,OAAKM,OAAL,CAAamC,GAAb,CAAiBnE,OAAjB;;AAEA;AACA,OAAKS,gBAAL,GAAwBA,gBAAxB;AACA;;AAED;;;;;qCACmBJ,2B,EAA6BgC,c,EAAgB7B,gB,EAAkBS,S,EAClF;AACC,OAAImD,cAAJ;;AAEA,OAAI,OAAO/B,cAAP,KAA0B,QAA9B,EACA;AACC+B,YAAQ/B,cAAR;AACA,IAHD,MAIK,IAAI7B,gBAAJ,EACL;AACC4D,YAAQ5D,iBAAiBS,SAAjB,CAAR;AACA;;AAED,OAAImD,SAAS/B,mBAAmB,KAAhC,EACA;AACC,SAAKL,OAAL,CAAamC,GAAb,CAAiB9D,+BAA+B,eAAhD,cAA2E+D,KAA3E;AACA;AACD;;AAED;AACA;;;;gCAEA;AAAA,OADYtD,WACZ,uEAD0B,EAC1B;AAAA,OAD8BlB,WAC9B;;AACC;AACA,OAAIA,YAAYyE,IAAZ,GAAmB,CAAvB,EACA;AACC,QAAMnE,UAAU,EAAhB;;AADD;AAAA;AAAA;;AAAA;AAGC,sDAAsBY,YAAYS,KAAZ,CAAkB,GAAlB,CAAtB,iHACA;AAAA,UADSF,SACT;;AACCA,kBAAYA,UAAUiD,IAAV,GAAiB/C,KAAjB,CAAuB,GAAvB,CAAZ;AACArB,cAAQmB,UAAU,CAAV,CAAR,IAAwBA,UAAU,CAAV,CAAxB;AACA;AAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AASC,sDAAyBzB,WAAzB,iHACA;AAAA,UADWuB,UACX;;AACC,UAAME,aAAYC,qBAAqBH,UAArB,EAAiCI,KAAjC,CAAuC,GAAvC,CAAlB;AACArB,cAAQmB,WAAU,CAAV,CAAR,IAAwBA,WAAU,CAAV,CAAxB;AACA;AAbF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeCP,kBAAc,oBAAYZ,OAAZ,EAAqBqE,GAArB,CAAyB;AAAA,YAAUjB,GAAV,SAAiBpD,QAAQoD,GAAR,CAAjB;AAAA,KAAzB,EAA0DkB,IAA1D,CAA+D,GAA/D,CAAd;AACA;;AAED,OAAI1D,WAAJ,EACA;AACC,SAAKkB,OAAL,CAAamC,GAAb,CAAiB,QAAjB,EAA2BrD,WAA3B;AACA;AACD;;AAED;AACA;;;;2BACS0B,S,EACT;AACC,QAAKR,OAAL,CAAayC,EAAb,CAAgB,UAAhB,EAA4B,UAASC,KAAT,EAC5B;AACC,QAAIA,MAAMC,SAAN,KAAoB,QAAxB,EACA;AACC;AACA;AACA;;AAED,QAAI,CAACD,MAAME,gBAAX,EACA;AACC;AACA;AACA;;AAEDpC,cAASkC,MAAMG,OAAf,EAAwBH,KAAxB;AACA,IAfD;AAgBA;;;yBAGD;AAAA;;AACC,UAAO,sBAAY,UAACjC,OAAD,EAAUC,MAAV,EACnB;AACC,WAAKV,OAAL,CAAa8C,GAAb,CAAiB,UAAC7B,KAAD,EAAQD,QAAR,EACjB;AACC;AACA,SAAIA,YAAYA,SAAShD,OAAT,CAAiB,YAAjB,CAAhB,EACA;AACC,aAAKkC,WAAL,CAAiBc,SAAShD,OAAT,CAAiB,YAAjB,CAAjB;AACA;;AAED,SAAIiD,KAAJ,EACA;AACC;AACA,UAAID,QAAJ,EACA;AACC,cAAK+B,mBAAL,CAAyB9B,KAAzB,EAAgCD,QAAhC;AACA;;AAED,aAAON,OAAOO,KAAP,CAAP;AACA;;AAED;AACA;AACA;AACA,SAAID,SAASgC,UAAT,KAAwB,GAA5B,EACA;AACC,aAAOvC,QAAQwC,SAAR,EAAmBjC,SAAShD,OAA5B,CAAP;AACA;;AAEDyC,aAAQ,OAAKyC,iBAAL,CAAuBlC,QAAvB,CAAR,EAA0CA,SAAShD,OAAnD;AACA,KA5BD;AA6BA,IA/BM,CAAP;AAgCA;;;sCAEmBiD,K,EAAOD,Q,EAC3B;AACC;AACAC,SAAMkC,MAAN,GAAenC,SAASgC,UAAxB;;AAEA,OAAMI,gBAAgB,KAAKF,iBAAL,CAAuBlC,QAAvB,CAAtB;;AAEA,WAAQA,SAASqC,IAAjB;AAEC;AACA,SAAK,kBAAL;AACA;AACA,SAAK,0BAAL;AACCpC,WAAMrB,IAAN,GAAawD,aAAb;;AAEA;AACA,SAAInC,MAAMrB,IAAN,CAAW0D,OAAf,EACA;AACCrC,YAAMqC,OAAN,GAAgBrC,MAAMrB,IAAN,CAAW0D,OAA3B;AACA;;AAED;;AAED;AACA;AACA;AACA;;AAEA,SAAK,YAAL;AACCrC,WAAMqC,OAAN,GAAgBF,aAAhB;AACA;;AAED,SAAK,WAAL;AACCnC,WAAMsC,IAAN,GAAaH,aAAb;;AAEA;AACA,SAAIpC,SAAShD,OAAT,CAAiB,iBAAjB,CAAJ,EACA;AACCiD,YAAMqC,OAAN,GAAgBtC,SAAShD,OAAT,CAAiB,iBAAjB,CAAhB;AACA;;AAED;AACA,SAAIgD,SAAShD,OAAT,CAAiB,qBAAjB,CAAJ,EACA;AACCiD,YAAMuC,KAAN,GAAcC,KAAKC,KAAL,CAAW1C,SAAShD,OAAT,CAAiB,qBAAjB,CAAX,CAAd;AACA;;AAED;AAxCF;AA0CA;;;oCAEiBgD,Q,EAClB;AACC,WAAQA,SAASqC,IAAjB;AAEC,SAAK,kBAAL;AACA;AACA,SAAK,0BAAL;AACC,SAAI,KAAK5E,gBAAT,EACA;AACC,aAAO,0BAAYuC,SAAS2C,IAArB,CAAP;AACA;AACD,YAAO3C,SAAS2C,IAAhB;;AAED;AACA;AACA;AACC,YAAO3C,SAAS4C,IAAhB;AAdF;AAgBA;;;;;AAGF;;;AACA,SAAStE,oBAAT,CAA8BH,UAA9B,EACA;AACC,KAAM0E,kBAAkB1E,WAAWC,OAAX,CAAmB,GAAnB,CAAxB;;AAEA,KAAIyE,mBAAmB,CAAvB,EACA;AACC1E,eAAaA,WAAW2E,KAAX,CAAiB,CAAjB,EAAoBD,eAApB,CAAb;AACA;;AAED,QAAO1E,WAAWmD,IAAX,EAAP;AACA","file":"http client.js","sourcesContent":["import superagent from 'superagent'\n\nimport { is_object, starts_with } from './helpers'\nimport parse_dates from './date parser'\nimport { get_cookie_in_a_browser } from './cookies'\n\n// This is an isomorphic (universal) HTTP client\n// which works both on Node.js and in the web browser,\n// and therefore can be used in Redux actions (for HTTP requests)\nexport default class http_client\n{\n\t// `Set-Cookie` HTTP headers\n\t// (in case any cookies are set)\n\tset_cookies = new Set()\n\n\t// Constructs a new instance of Http client.\n\t// Optionally takes an Http Request as a reference to mimic\n\t// (in this case, cookies, to make authentication work on the server-side).\n\tconstructor(options = {})\n\t{\n\t\tconst\n\t\t{\n\t\t\tsecure,\n\t\t\thost,\n\t\t\tport,\n\t\t\theaders,\n\t\t\tclone_request,\n\t\t\tcookies,\n\t\t\tprotected_cookie,\n\t\t\tprotected_cookie_value,\n\t\t\tauthentication_token_header,\n\t\t\ton_before_send,\n\t\t\tcatch_to_retry,\n\t\t\tget_access_token\n\t\t}\n\t\t= options\n\n\t\tconst parse_json_dates = options.parse_dates !== false\n\n\t\t// The default `format_url` gives protection against XSS attacks\n\t\t// in a way that `Authorization: Bearer {token}` HTTP header\n\t\t// is only exposed (sent) to local URLs, therefore an attacker\n\t\t// theoretically won't be able to hijack that authentication token.\n\t\t//\n\t\t// An XSS attacker is assumed to be unable to set his own\n\t\t// `options.format_url` because the rendered page content\n\t\t// is placed before the `options` are even defined (inside webpack bundle).\n\t\t//\n\t\t// Once `http_client` instance is created, the `protected_cookie_value` variable\n\t\t// is erased from everywhere except the closures of HTTP methods defined below,\n\t\t// and the protected cookie value is therefore unable to be read directly by an attacker.\n\t\t//\n\t\t// The `format_url` function also resided in the closures of HTTP methods defined below,\n\t\t// so it's also unable to be changed by an attacker.\n\t\t//\n\t\t// The only thing an attacker is left to do is to send malicious requests\n\t\t// to the server on behalf of the user, and those requests would be executed,\n\t\t// but the attacker won't be able to hijack the protected cookie value.\n\t\t//\n\t\tconst format_url = options.format_url || this.format_url.bind(this)\n\n\t\t// Clone HTTP request cookies on the server-side\n\t\t// (to make authentication work)\n\t\tif (clone_request)\n\t\t{\n\t\t\tthis.server = true\n\t\t\tthis.cookies_raw = clone_request.headers.cookie\n\t\t}\n\t\t\n\t\tthis.host = host\n\t\tthis.port = port || 80\n\t\tthis.secure = secure\n\n\t\tconst http_methods =\n\t\t[\n\t\t\t'get',\n\t\t\t'post',\n\t\t\t'put',\n\t\t\t'patch',\n\t\t\t'delete',\n\t\t\t'head',\n\t\t\t'options'\n\t\t]\n\n\t\t// \"Get cookie value by name\" helper (works both on client and server)\n\t\tconst getCookie = this.server\n\t\t?\n\t\t((name) =>\n\t\t{\n\t\t\t// If this cookie was set dynamically then return it\n\t\t\tfor (const cookie_raw of this.set_cookies)\n\t\t\t{\n\t\t\t\tif (cookie_raw.indexOf(`${name}=`) === 0)\n\t\t\t\t{\n\t\t\t\t\tconst key_value = cookie_raw_key_value(cookie_raw).split('=')\n\t\t\t\t\treturn key_value[1]\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Return the original request cookie\n\t\t\treturn cookies.get(name)\n\t\t})\n\t\t:\n\t\t((name) =>\n\t\t{\n\t\t\t// \"httpOnly\" cookies can't be read by a web browser\n\t\t\tif (name === protected_cookie)\n\t\t\t{\n\t\t\t\treturn protected_cookie_value\n\t\t\t}\n\n\t\t\t// A regular cookie which can be read by a web browser\n\t\t\treturn get_cookie_in_a_browser(name)\n\t\t})\n\n\t\t// `superagent` doesn't save cookies by default on the server side.\n\t\t// Therefore calling `.agent()` explicitly to enable setting cookies.\n\t\tconst agent = this.server ? superagent.agent() : superagent\n\n\t\t// Define HTTP methods on this `http` utility instance\n\t\tfor (let method of http_methods)\n\t\t{\n\t\t\tthis[method] = (path, data, options = {}) =>\n\t\t\t{\n\t\t\t\t// `url` will be absolute for server-side\n\t\t\t\tconst url = format_url(path, this.server)\n\n\t\t\t\t// Is incremented on each retry\n\t\t\t\tlet retry_count = -1\n\n\t\t\t\t// Performs an HTTP request to the given `url`.\n\t\t\t\t// Can retry itself.\n\t\t\t\tconst perform_http_request = () =>\n\t\t\t\t{\n\t\t\t\t\t// Create Http request\n\t\t\t\t\tconst request = new Http_request(method, url, data,\n\t\t\t\t\t{\n\t\t\t\t\t\tagent,\n\t\t\t\t\t\tparse_json_dates,\n\t\t\t\t\t\theaders : { ...headers, ...options.headers },\n\t\t\t\t\t\tnew_cookies : (new_cookies) =>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (this.server)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Cookies will be duplicated here\n\t\t\t\t\t\t\t\t// because `superagent.agent()` persists\n\t\t\t\t\t\t\t\t// `Set-Cookie`s between subsequent requests\n\t\t\t\t\t\t\t\t// (i.e. for the same `http_client` instance).\n\t\t\t\t\t\t\t\t// Therefore using a `Set` instead of an array.\n\t\t\t\t\t\t\t\tfor (const cookie of new_cookies)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.set_cookies.add(cookie)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\n\t\t\t\t\t// Sets `Authorization: Bearer ${token}` in HTTP request header\n\t\t\t\t\trequest.add_authentication\n\t\t\t\t\t(\n\t\t\t\t\t\tauthentication_token_header,\n\t\t\t\t\t\toptions.authentication,\n\t\t\t\t\t\tget_access_token,\n\t\t\t\t\t\tgetCookie\n\t\t\t\t\t)\n\n\t\t\t\t\t// Server side only\n\t\t\t\t\t// (copies user authentication cookies to retain session specific data)\n\t\t\t\t\tif (this.server && is_relative_url(path))\n\t\t\t\t\t{\n\t\t\t\t\t\trequest.add_cookies(this.cookies_raw, this.set_cookies)\n\t\t\t\t\t}\n\n\t\t\t\t\t// Allows customizing HTTP requests\n\t\t\t\t\t// (for example, setting some HTTP headers)\n\t\t\t\t\tif (on_before_send)\n\t\t\t\t\t{\n\t\t\t\t\t\ton_before_send(request.request)\n\t\t\t\t\t}\n\n\t\t\t\t\t// File upload progress metering\n\t\t\t\t\t// https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest\n\t\t\t\t\tif (options.progress)\n\t\t\t\t\t{\n\t\t\t\t\t\trequest.progress(options.progress)\n\t\t\t\t\t}\n\n\t\t\t\t\t// If using `bluebird` and `Promise` cancellation is configured\n\t\t\t\t\t// http://bluebirdjs.com/docs/api/cancellation.html\n\t\t\t\t\treturn new Promise((resolve, reject, onCancel) =>\n\t\t\t\t\t{\n\t\t\t\t\t\t// Send HTTP request\n\t\t\t\t\t\trequest.send().then(resolve, reject)\n\n\t\t\t\t\t\t// If using `bluebird` and `Promise` cancellation is configured\n\t\t\t\t\t\t// http://bluebirdjs.com/docs/api/cancellation.html\n\t\t\t\t\t\t// https://github.com/petkaantonov/bluebird/issues/1323\n\t\t\t\t\t\tif (Promise.version && onCancel)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tonCancel(() => request.request.abort())\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// // One could store the `request` to later `.abort()` it.\n\t\t\t\t\t\t// // https://github.com/halt-hammerzeit/react-isomorphic-render/issues/46\n\t\t\t\t\t\t// if (options.onRequest)\n\t\t\t\t\t\t// {\n\t\t\t\t\t\t// \toptions.onRequest(request.request)\n\t\t\t\t\t\t// }\n\t\t\t\t\t})\n\t\t\t\t\t.then\n\t\t\t\t\t(\n\t\t\t\t\t\t(response) => response,\n\t\t\t\t\t\t(error) =>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// `superagent` would have already output the error to console\n\t\t\t\t\t\t\t// console.error(error.stack)\n\n\t\t\t\t\t\t\t// (legacy)\n\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t// this turned out to be a lame way of handling cookies,\n\t\t\t\t\t\t\t// because cookies are sent in request \n\t\t\t\t\t\t\t// with no additional parameters\n\t\t\t\t\t\t\t// such as `path`, `httpOnly` and `expires`,\n\t\t\t\t\t\t\t// so there were cookie duplication issues.\n\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t// if (response)\n\t\t\t\t\t\t\t// {\n\t\t\t\t\t\t\t// \tif (response.get('set-cookie'))\n\t\t\t\t\t\t\t// \t{\n\t\t\t\t\t\t\t// \t\tthis.cookies_raw = response.get('set-cookie')\n\t\t\t\t\t\t\t// \t}\n\t\t\t\t\t\t\t// }\n\n\t\t\t\t\t\t\t// Can optionally retry an HTTP request in case of an error\n\t\t\t\t\t\t\t// (e.g. if an Auth0 access token expired and has to be refreshed).\n\t\t\t\t\t\t\t// https://auth0.com/blog/refresh-tokens-what-are-they-and-when-to-use-them/\n\t\t\t\t\t\t\tif (catch_to_retry)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tretry_count++\n\n\t\t\t\t\t\t\t\treturn catch_to_retry(error, retry_count,\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tgetCookie,\n\t\t\t\t\t\t\t\t\tthis: this,\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.then(perform_http_request)\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// HTTP request failed with an `error`\n\t\t\t\t\t\t\treturn Promise.reject(error)\n\t\t\t\t\t\t}\n\t\t\t\t\t)\n\t\t\t\t}\n\n\t\t\t\treturn perform_http_request()\n\t\t\t}\n\t\t}\n\t}\n\n\t// Validates the requested URL,\n\t// and also prepends host and port to it on the server side.\n\tformat_url(path, server)\n\t{\n\t\t// Rejects URLs of form \"//www.google.ru/search\",\n\t\t// and verifies that the `path` is an internal URL.\n\t\t// This check is performed to avoid leaking cookies to a third party.\n\t\tif (!is_relative_url(path))\n\t\t{\n\t\t\tthrow new Error(`Only internal URLs (e.g. \"/api/item?id=1\") are allowed for the \"http\" utility. Got an external url \"${path}\". A developer can allow absolute URLs by supplying a custom (looser) \"http.url\" parameter function (see the README).`)\n\t\t}\n\n\t\t// Prepend host and port on the server side\n\t\tif (server)\n\t\t{\n\t\t\tconst protocol = this.secure ? 'https' : 'http'\n\t\t\treturn `${protocol}://${this.host}:${this.port}${path}`\n\t\t}\n\n\t\treturn path\n\t}\n}\n\nfunction is_relative_url(path)\n{\n\treturn starts_with(path, '/') && !starts_with(path, '//')\n}\n\nfunction has_binary_data(data)\n{\n\tfor (let key of Object.keys(data))\n\t{\n\t\tconst parameter = data[key]\n\n\t\tif (typeof HTMLInputElement !== 'undefined' && parameter instanceof HTMLInputElement)\n\t\t{\n\t\t\treturn true\n\t\t}\n\n\t\tif (typeof FileList !== 'undefined' && parameter instanceof FileList)\n\t\t{\n\t\t\treturn true\n\t\t}\n\n\t\t// `File` is a subclass of `Blob`\n\t\t// https://developer.mozilla.org/en-US/docs/Web/API/Blob\n\t\tif (typeof Blob !== 'undefined' && parameter instanceof Blob)\n\t\t{\n\t\t\treturn true\n\t\t}\n\t}\n}\n\nfunction construct_form_data(data)\n{\n\t// Just in case (who knows)\n\tif (typeof FormData === 'undefined')\n\t{\n\t\t// Silent fallback\n\t\treturn data\n\t}\n\n\tconst form_data = new FormData()\n\n\tfor (let key of Object.keys(data))\n\t{\n\t\tlet parameter = data[key]\n\n\t\t// For an `<input type=\"file\"/>` DOM element just take its `.files`\n\t\tif (typeof HTMLInputElement !== 'undefined' && parameter instanceof HTMLInputElement)\n\t\t{\n\t\t\tparameter = parameter.files\n\t\t}\n\n\t\t// For a `FileList` parameter (e.g. `multiple` file upload),\n\t\t// iterate the `File`s in the `FileList`\n\t\t// and add them to the form data as a `[File]` array.\n\t\tif (typeof FileList !== 'undefined' && parameter instanceof FileList)\n\t\t{\n\t\t\tlet i = 0\n\t\t\twhile (i < parameter.length)\n\t\t\t{\n\t\t\t\tform_data.append(key, parameter[i])\n\t\t\t\ti++\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\n\t\tform_data.append(key, parameter)\n\t}\n\n\treturn form_data\n}\n\nclass Http_request\n{\n\tconstructor(method, url, data, options)\n\t{\n\t\tconst { agent, headers, parse_json_dates, new_cookies } = options\n\n\t\tthis.new_cookies = new_cookies\n\n\t\t// Create Http request.\n\t\tthis.request = agent[method](url)\n\n\t\t// Attach data to the outgoing HTTP request\n\t\tif (data)\n\t\t{\n\t\t\tswitch (method)\n\t\t\t{\n\t\t\t\tcase 'get':\n\t\t\t\t\tthis.request.query(data)\n\t\t\t\t\tbreak\n\n\t\t\t\tcase 'post':\n\t\t\t\tcase 'put':\n\t\t\t\tcase 'patch':\n\t\t\t\tcase 'head':\n\t\t\t\tcase 'options':\n\t\t\t\t\tthis.request.send(has_binary_data(data) ? construct_form_data(data) : data)\n\t\t\t\t\tbreak\n\n\t\t\t\tcase 'delete':\n\t\t\t\t\tthrow new Error(`\"data\" supplied for HTTP DELETE request: ${JSON.stringify(data)}`)\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(`Unknown HTTP method: ${method}`)\n\t\t\t}\n\t\t}\n\n\t\t// Apply HTTP headers\n\t\tthis.request.set(headers)\n\n\t\t// `true`/`false`\n\t\tthis.parse_json_dates = parse_json_dates\n\t}\n\n\t// Sets `Authorization: Bearer ${token}` in HTTP request header\n\tadd_authentication(authentication_token_header, authentication, get_access_token, getCookie)\n\t{\n\t\tlet token\n\n\t\tif (typeof authentication === 'string')\n\t\t{\n\t\t\ttoken = authentication\n\t\t}\n\t\telse if (get_access_token)\n\t\t{\n\t\t\ttoken = get_access_token(getCookie)\n\t\t}\n\n\t\tif (token && authentication !== false)\n\t\t{\n\t\t\tthis.request.set(authentication_token_header || 'Authorization', `Bearer ${token}`)\n\t\t}\n\t}\n\n\t// Server side only\n\t// (copies user authentication cookies to retain session specific data)\n\tadd_cookies(cookies_raw = '', set_cookies)\n\t{\n\t\t// Merge `cookies_raw` and `set_cookies` (a `Set`)\n\t\tif (set_cookies.size > 0)\n\t\t{\n\t\t\tconst cookies = {}\n\n\t\t\tfor (let key_value of cookies_raw.split(';'))\n\t\t\t{\n\t\t\t\tkey_value = key_value.trim().split('=')\n\t\t\t\tcookies[key_value[0]] = key_value[1]\n\t\t\t}\n\n\t\t\tfor (const cookie_raw of set_cookies)\n\t\t\t{\n\t\t\t\tconst key_value = cookie_raw_key_value(cookie_raw).split('=')\n\t\t\t\tcookies[key_value[0]] = key_value[1]\n\t\t\t}\n\n\t\t\tcookies_raw = Object.keys(cookies).map(key => `${key}=${cookies[key]}`).join(';')\n\t\t}\n\n\t\tif (cookies_raw)\n\t\t{\n\t\t\tthis.request.set('cookie', cookies_raw)\n\t\t}\n\t}\n\n\t// File upload progress metering\n\t// https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest\n\tprogress(progress)\n\t{\n\t\tthis.request.on('progress', function(event)\n\t\t{\n\t\t\tif (event.direction !== 'upload')\n\t\t\t{\n\t\t\t\t// Only interested in file upload progress metering\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tif (!event.lengthComputable)\n\t\t\t{\n\t\t\t\t// Unable to compute progress information since the total size is unknown\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tprogress(event.percent, event)\n\t\t})\n\t}\n\n\tsend()\n\t{\n\t\treturn new Promise((resolve, reject) =>\n\t\t{\n\t\t\tthis.request.end((error, response) =>\n\t\t\t{\n\t\t\t\t// If any cookies were set then track them (for later)\n\t\t\t\tif (response && response.headers['set-cookie'])\n\t\t\t\t{\n\t\t\t\t\tthis.new_cookies(response.headers['set-cookie'])\n\t\t\t\t}\n\n\t\t\t\tif (error)\n\t\t\t\t{\n\t\t\t\t\t// Infer additional `error` properties from the HTTP response\n\t\t\t\t\tif (response)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.populate_error_data(error, response)\n\t\t\t\t\t}\n\n\t\t\t\t\treturn reject(error)\n\t\t\t\t}\n\n\t\t\t\t// If HTTP response status is \"204 - No content\"\n\t\t\t\t// (e.g. PUT, DELETE)\n\t\t\t\t// then resolve with an empty result.\n\t\t\t\tif (response.statusCode === 204)\n\t\t\t\t{\n\t\t\t\t\treturn resolve(undefined, response.headers)\n\t\t\t\t}\n\n\t\t\t\tresolve(this.get_response_data(response), response.headers)\n\t\t\t})\n\t\t})\n\t}\n\n\tpopulate_error_data(error, response)\n\t{\n\t\t// Set `error.status` to HTTP response status code\n\t\terror.status = response.statusCode\n\n\t\tconst response_data = this.get_response_data(response)\n\n\t\tswitch (response.type)\n\t\t{\n\t\t\t// Set error `data` from response body,\n\t\t\tcase 'application/json':\n\t\t\t// http://jsonapi.org/\n\t\t\tcase 'application/vnd.api+json':\n\t\t\t\terror.data = response_data\n\n\t\t\t\t// Set the more meaningful message for the error (if available)\n\t\t\t\tif (error.data.message)\n\t\t\t\t{\n\t\t\t\t\terror.message = error.data.message\n\t\t\t\t}\n\n\t\t\t\tbreak\n\n\t\t\t// If the HTTP response was not a JSON object,\n\t\t\t// but rather a text or an HTML page,\n\t\t\t// then include that information in the `error`\n\t\t\t// for future reference (e.g. easier debugging).\n\n\t\t\tcase 'text/plain':\n\t\t\t\terror.message = response_data\n\t\t\t\tbreak\n\n\t\t\tcase 'text/html':\n\t\t\t\terror.html = response_data\n\n\t\t\t\t// Recover the original error message (if any)\n\t\t\t\tif (response.headers['x-error-message'])\n\t\t\t\t{\n\t\t\t\t\terror.message = response.headers['x-error-message']\n\t\t\t\t}\n\n\t\t\t\t// Recover the original error stack trace (if any)\n\t\t\t\tif (response.headers['x-error-stack-trace'])\n\t\t\t\t{\n\t\t\t\t\terror.stack = JSON.parse(response.headers['x-error-stack-trace'])\n\t\t\t\t}\n\n\t\t\t\tbreak\n\t\t}\n\t}\n\n\tget_response_data(response)\n\t{\n\t\tswitch (response.type)\n\t\t{\n\t\t\tcase 'application/json':\n\t\t\t// http://jsonapi.org/\n\t\t\tcase 'application/vnd.api+json':\n\t\t\t\tif (this.parse_json_dates)\n\t\t\t\t{\n\t\t\t\t\treturn parse_dates(response.body)\n\t\t\t\t}\n\t\t\t\treturn response.body\n\n\t\t\t// case 'text/plain':\n\t\t\t// case 'text/html':\n\t\t\tdefault:\n\t\t\t\treturn response.text\n\t\t}\n\t}\n}\n\n// Leaves just `key=value` from the cookie string\nfunction cookie_raw_key_value(cookie_raw)\n{\n\tconst semicolon_index = cookie_raw.indexOf(';')\n\n\tif (semicolon_index >= 0)\n\t{\n\t\tcookie_raw = cookie_raw.slice(0, semicolon_index)\n\t}\n\n\treturn cookie_raw.trim()\n}"]}