{"version":3,"sources":["../../source/redux/preload.js"],"names":["React","Component","hoist_statics","Preload_method_name","Preload_options_name","preload","options","Wrapped","Preload","props","displayName","get_display_name","name"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,aAAP,MAA0B,yBAA1B;;AAEA,SAASC,mBAAT,EAA8BC,oBAA9B,QAA0D,oCAA1D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,UAASC,OAAT,EAAkBC,OAAlB,EACf;AACC,QAAO,UAASC,OAAT,EACP;AAAA,MACOC,OADP;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,6BAIE;AACC,YAAO,oBAAC,OAAD,EAAa,KAAKC,KAAlB,CAAP;AACA;AANH;;AAAA;AAAA,IACuBR,SADvB;;AASCO,UAAQL,mBAAR,IAAgCE,OAAhC;AACAG,UAAQJ,oBAAR,IAAgCE,OAAhC;;AAEAE,UAAQE,WAAR,gBAAiCC,iBAAiBJ,OAAjB,CAAjC;;AAEA,SAAOL,cAAcM,OAAd,EAAuBD,OAAvB,CAAP;AACA,EAhBD;AAiBA;;AAED,SAASI,gBAAT,CAA0BJ,OAA1B,EACA;AACC,QAAOA,QAAQG,WAAR,IAAuBH,QAAQK,IAA/B,IAAuC,WAA9C;AACA","file":"preload.js","sourcesContent":["import React, { Component } from 'react'\nimport hoist_statics from 'hoist-non-react-statics'\n\nimport { Preload_method_name, Preload_options_name } from './middleware/preloading middleware'\n\n// `@preload()` decorator.\n//\n// `preload` function must return a `Promise`.\n// `function preload({ dispatch, getState, location, parameters, server })`.\n//\n// The decorator also receives `options`:\n//\n// * `blocking` — if `false` then child `<Route/>` `@preload()`s\n//                will not wait for this `@preload()` to finish first\n//\n// * `client` — if `true` then this `@preload()` will be executed only on the client side\n//              including the moment when the page is initially loaded.\n//\nexport default function(preload, options)\n{\n\treturn function(Wrapped)\n\t{\n\t\tclass Preload extends Component\n\t\t{\n\t\t\trender()\n\t\t\t{\n\t\t\t\treturn <Wrapped {...this.props} />\n\t\t\t}\n\t\t}\n\n\t\tPreload[Preload_method_name]  = preload\n\t\tPreload[Preload_options_name] = options\n\n\t\tPreload.displayName = `Preload(${get_display_name(Wrapped)})`\n\t\t\n\t\treturn hoist_statics(Preload, Wrapped)\n\t}\n}\n\nfunction get_display_name(Wrapped)\n{\n\treturn Wrapped.displayName || Wrapped.name || 'Component'\n}"]}