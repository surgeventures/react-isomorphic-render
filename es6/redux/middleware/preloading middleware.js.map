{"version":3,"sources":["../../../source/redux/middleware/preloading middleware.js"],"names":["deep_equal","getRouteParams","location_url","strip_basename","server_redirect","Preload","Redirect","GoTo","redirect_action","goto_action","history_redirect_action","history_goto_action","match_routes_against_location","get_route_path","add_instant_back","reset_instant_back","Preload_method_name","Preload_options_name","Preload_started","Preload_finished","Preload_failed","preloading_middleware","server","error_handler","preload_helpers","routes","get_history","basename","report_stats","on_navigate","getState","dispatch","action","type","next","location","previous_location","getCurrentLocation","preloading_middleware_dispatch","initial","preloading","previous_preloading","window","__preloading_page","report_preload_stats","time","route","url","preload","history","then","redirect","router_state","started_at","Date","now","pending","cancelled","cancel","components","params","preloader","preloader_dispatch","proceed_with_navigation","promise","catch","error","_redirect","path","pathname","to","navigate","instant_back","initial_client_side_preload","parameters","preload_arguments","_previous_routes","previous_routes","previous_parameters","_previous_route_parameters","i","length","component","slice","get_preloaders","filter","map","Array","isArray","all","reject","options","preloads","chain","parallel","client","blocking","push","reduce","link","thread","resolve","event"],"mappings":";;;AAAA;AACA;;AAEA,OAAOA,UAAP,MAAuB,YAAvB;AACA,OAAOC,cAAP,MAA2B,iCAA3B;;AAEA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,gBAA7C;AACA,SAASC,eAAT,QAAgC,eAAhC;AACA,SAASC,OAAT,EAAkBC,QAAlB,EAA4BC,IAA5B,EAAkCC,eAAlC,EAAmDC,WAAnD,EAAgEC,uBAAhE,EAAyFC,mBAAzF,QAAoH,YAApH;AACA,OAAOC,6BAAP,MAA0C,0BAA1C;AACA,OAAOC,cAAP,MAA2B,mCAA3B;AACA,SAASC,gBAAT,EAA2BC,kBAA3B,QAAqD,wBAArD;;AAEA,OAAO,IAAMC,sBAAuB,aAA7B;AACP,OAAO,IAAMC,uBAAuB,qBAA7B;;AAEP,OAAO,IAAMC,kBAAmB,iDAAzB;AACP,OAAO,IAAMC,mBAAmB,kDAAzB;AACP,OAAO,IAAMC,iBAAmB,gDAAzB;;AAEP,eAAe,SAASC,qBAAT,CAA+BC,MAA/B,EAAuCC,aAAvC,EAAsDC,eAAtD,EAAuEC,MAAvE,EAA+EC,WAA/E,EAA4FC,QAA5F,EAAsGC,YAAtG,EAAoHC,WAApH,EACf;AACC,QAAO;AAAA,MAAGC,QAAH,QAAGA,QAAH;AAAA,MAAaC,QAAb,QAAaA,QAAb;AAAA,SAA4B;AAAA,UAAQ,kBAC3C;AACC;AACA,QAAIC,OAAOC,IAAP,KAAgB5B,OAApB,EACA;AACC;AACA,YAAO6B,KAAKF,MAAL,CAAP;AACA;;AAED;AACA;AACA;AACA;AACA;AACAA,WAAOG,QAAP,GAAkBhC,eAAe6B,OAAOG,QAAtB,EAAgCR,QAAhC,CAAlB;;AAEA;AACA;AACA,QAAMS,oBAAoBV,cAAcW,kBAAd,EAA1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACAN,eAAWO,+BAA+BP,QAA/B,EAAyCT,MAAzC,CAAX;;AAEA;AACA,QAAIO,eAAe,CAACG,OAAOO,OAA3B,EACA;AACCV,iBAAY3B,aAAa8B,OAAOG,QAApB,CAAZ,EAA2CH,OAAOG,QAAlD;AACA;;AAED;AACA;AACA;AACA,QAAMK,aAAa,EAAnB;;AAEA;AACA,QAAIC,4BAAJ;AACA,QAAI,CAACnB,MAAL,EACA;AACCmB,2BAAsBC,OAAOC,iBAA7B;AACAD,YAAOC,iBAAP,GAA2BH,UAA3B;AACA;;AAED,aAASI,oBAAT,CAA8BC,IAA9B,EAAoCC,KAApC,EACA;AACC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAIlB,YAAJ,EACA;AACCA,mBACC;AACAmB,YAAM7C,aAAa8B,OAAOG,QAApB,CADN;AAEAW,mBAFA;AAGAD,aACA;AACCG,iBAASH;AADV;AAJA,OADD;AASA;AACD;;AAED,WAAOjC,8BACN;AACAa,aAAW,OAAOA,MAAP,KAAkB,UAAlB,GAA+BA,OAAO,EAAEM,kBAAF,EAAYD,kBAAZ,EAAP,CAA/B,GAAgEL,MAD3E;AAEAwB,cAAWvB,aAFX;AAGAS,eAAWH,OAAOG;AAHlB,KADM,EAMNe,IANM,CAMD,iBACN;AAAA,SADSC,QACT,SADSA,QACT;AAAA,SADmBC,YACnB,SADmBA,YACnB;;AACC;AACA,SAAID,QAAJ,EACA;AACC;AACA;AACA,UAAI7B,MAAJ,EACA;AACClB,uBAAgB+C,QAAhB;AACA;;AAED;AACA;AACApB,eAASvB,gBAAgB2C,QAAhB,CAAT;AACA;AACA;AACA;AACA;;AAED;AACA,SAAIE,mBAAJ;;AAEA,SAAI,CAAC/B,MAAL,EACA;AACC;AACA+B,mBAAaC,KAAKC,GAAL,EAAb;;AAEA;AACA;AACA;;AAEA;AACA;AACA,UAAId,uBAAuBA,oBAAoBe,OAA3C,IAAsD,CAACf,oBAAoBgB,SAA/E,EACA;AACChB,2BAAoBiB,MAApB;AACA;AACA3B,gBAAS,EAAEE,MAAMd,gBAAR,EAAT;AACA;AACD;;AAED;AACA;AACA,SAAM2B,QAAQjC,eAAeuC,YAAf,CAAd;;AAEA;AA7CD,SA8CS3B,MA9CT,GA8CkD2B,YA9ClD,CA8CS3B,MA9CT;AAAA,SA8CiBkC,UA9CjB,GA8CkDP,YA9ClD,CA8CiBO,UA9CjB;AAAA,SA8C6BxB,QA9C7B,GA8CkDiB,YA9ClD,CA8C6BjB,QA9C7B;AAAA,SA8CuCyB,MA9CvC,GA8CkDR,YA9ClD,CA8CuCQ,MA9CvC;;AAgDC;;AACA,SAAMZ,UAAUa,UAEf7B,OAAOO,OAFQ,EAGfjB,MAHe,EAIfG,MAJe,EAKfkC,UALe,EAMf7B,QANe,EAOfgC,mBAAmB/B,QAAnB,EAA6BS,UAA7B,CAPe,EAQfd,aARe,EASfS,QATe,EAUfyB,MAVe,EAWfpC,eAXe,EAYfgB,UAZe,CAAhB;;AAeA;AACA,SAAI,CAACQ,OAAL,EACA;AACC;AACA;AACAe,8BAAwBhC,QAAxB,EAAkCC,MAAlC,EAA0CV,MAA1C,EAAkDI,WAAlD,EAA+DU,iBAA/D;AACA;AACA;AACA;AACA;;AAED;AACAL,cAAS,EAAEE,MAAMf,eAAR,EAAT;;AAEA;AACA;AACA;AACA,SAAM8C,UAAUhB,SAAhB;;AAEAR,gBAAWgB,OAAX,GAAqB,IAArB;;AAEA;AACAhB,gBAAWkB,MAAX,GAAoB,YACpB;AACClB,iBAAWiB,SAAX,GAAuB,IAAvB;;AAEA;AACA;AACA;AACA;AACA,UAAIO,QAAQN,MAAZ,EACA;AACC;AACAM,eAAQC,KAAR,CAAc;AAAA,eAAO,EAAP;AAAA,QAAd,EAA0BP,MAA1B;AACA;AACD,MAbD;;AAeA,YAAOM;AACN;AADM,MAELd,IAFK,CAEA,YACN;AACCV,iBAAWgB,OAAX,GAAqB,KAArB;;AAEA;AACA;AACA;AACA,UAAIhB,WAAWiB,SAAf,EACA;AACC;AACA;AACA,cAAO,KAAP;AACA;;AAED;AACA1B,eAAS,EAAEE,MAAMd,gBAAR,EAAT;;AAEA;AACAyB,2BAAqBU,KAAKC,GAAL,KAAaF,UAAlC,EAA8CP,KAA9C;;AAEA;AACA;AACAiB,8BAAwBhC,QAAxB,EAAkCC,MAAlC,EAA0CV,MAA1C,EAAkDI,WAAlD,EAA+DU,iBAA/D;AACA,MAzBK,EA0BN,UAAC8B,KAAD,EACA;AACC;AACA;AACA;AACA,UAAI,CAAC1B,WAAWiB,SAAhB,EACA;AACC,WAAI,CAACnC,MAAL,EACA;AACCkB,mBAAW0B,KAAX,GAAmBA,KAAnB;AACA;;AAED;AACAnC,gBAAS,EAAEE,MAAMb,cAAR,EAAwB8C,YAAxB,EAAT;AACA;;AAED,YAAMA,KAAN;AACA,MA3CK,CAAP;AA4CA,KAxJM,EAyJND,KAzJM,CAyJA,UAACC,KAAD,EACP;AACC;AACA1B,gBAAWgB,OAAX,GAAqB,KAArB;AACA;;AAEA;AACA;AACA;AACA,SAAIlC,UAAU4C,MAAMC,SAApB,EACA;AACC;AACA;AACA,YAAMD,KAAN;AACA;;AAED;AACA3C,mBAAc2C,KAAd,EACA;AACCE,YAAOpC,OAAOG,QAAP,CAAgBkC,QADxB;AAECtB,WAAO7C,aAAa8B,OAAOG,QAApB,CAFR;AAGC;AACA;AACA;AACA;AACAgB,gBAAW;AAAA,cAAMpB,SAASvB,gBAAgB8D,EAAhB,CAAT,CAAN;AAAA,OAPZ;AAQCvC,wBARD;AASCD,wBATD;AAUCR;AAVD,MADA;;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAM4C,KAAN;AACA,KAlMM,CAAP;AAmMA,IAhRkC;AAAA,GAA5B;AAAA,EAAP;AAiRA;;AAED;AACA;AACA;AACA,SAASH,uBAAT,CAAiChC,QAAjC,EAA2CC,MAA3C,EAAmDV,MAAnD,EAA2DI,WAA3D,EAAwEU,iBAAxE,EACA;AACC,KAAId,MAAJ,EACA;AACC;AACA;;AAED,KAAIU,OAAOuC,QAAX,EACA;AACC,MAAIvC,OAAOmB,QAAX,EACA;AACCpB,YAASrB,wBAAwBsB,OAAOG,QAA/B,CAAT;AACA,GAHD,MAKA;AACCJ,YAASpB,oBAAoBqB,OAAOG,QAA3B,CAAT;AACA;AACD;;AAED,KAAIH,OAAOwC,YAAX,EACA;AACC1D,mBAAiBY,cAAcW,kBAAd,EAAjB,EAAqDD,iBAArD;AACA;AACD;AACA;AACA;AACA;AAPA,MASA;AACCrB;AACA;AACD;;AAED;AACA;AACA;AACA;AACA;AACA,IAAM8C,YAAY,SAAZA,SAAY,CAACY,2BAAD,EAA8BnD,MAA9B,EAAsCG,MAAtC,EAA8CkC,UAA9C,EAA0D7B,QAA1D,EAAoEC,QAApE,EAA8EkB,OAA9E,EAAuFd,QAAvF,EAAiGuC,UAAjG,EAA6GlD,eAA7G,EAA8HgB,UAA9H,EAClB;AACC,KAAImC,oBAAoB,EAAE5C,kBAAF,EAAYD,kBAAZ,EAAsBmB,gBAAtB,EAA+Bd,kBAA/B,EAAyCuC,sBAAzC,EAAxB;;AAEA,KAAIlD,eAAJ,EACA;AACCmD,mCAAyBA,iBAAzB,EAA+CnD,eAA/C;AACA;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAI,CAACF,MAAL,EACA;AACC,MAAIoB,OAAOkC,gBAAX,EACA;AACC,OAAMC,kBAAsBnC,OAAOkC,gBAAnC;AACA,OAAME,sBAAsBpC,OAAOqC,0BAAnC;;AAEA,OAAIC,IAAI,CAAR;AACA,UAAOA,IAAIvD,OAAOwD,MAAP,GAAgB,CAApB,IACNJ,gBAAgBG,CAAhB,EAAmBE,SAAnB,KAAiCzD,OAAOuD,CAAP,EAAUE,SADrC,IAENlF,WAAWC,eAAe4E,gBAAgBG,CAAhB,CAAf,EAAmCF,mBAAnC,CAAX,EAAoE7E,eAAewB,OAAOuD,CAAP,CAAf,EAA0BN,UAA1B,CAApE,CAFD,EAGA;AACCM;AACA;;AAEDrB,gBAAaA,WAAWwB,KAAX,CAAiBH,CAAjB,CAAb;AACA;;AAEDtC,SAAOkC,gBAAP,GAAoCnD,MAApC;AACAiB,SAAOqC,0BAAP,GAAoCL,UAApC;AACA;;AAED;AACA;AACA,UAASU,cAAT,GACA;AACC;AACA,SAAOzB,WACL0B,MADK,CACE;AAAA,UAAaH,aAAaA,UAAUlE,mBAAV,CAA1B;AAAA,GADF,EAELsE,GAFK,CAED;AAAA,UACJ;AACAtC,aAAS,mBACT;AACC,SACA;AACC;AACA,UAAIgB,UAAUkB,UAAUlE,mBAAV,EAA+B2D,iBAA/B,CAAd;;AAEA;AACA,UAAIY,MAAMC,OAAN,CAAcxB,OAAd,CAAJ,EACA;AACCA,iBAAU,SAAQyB,GAAR,CAAYzB,OAAZ,CAAV;AACA;;AAED;AACA,UAAI,CAACA,OAAD,IAAY,OAAOA,QAAQd,IAAf,KAAwB,UAAxC,EACA;AACC,cAAO,SAAQwC,MAAR,iDAA+D1B,OAA/D,CAAP;AACA;;AAED,aAAOA,OAAP;AACA,MAlBD,CAmBA,OAAOE,KAAP,EACA;AACC,aAAO,SAAQwB,MAAR,CAAexB,KAAf,CAAP;AACA;AACD,KA1BD;AA2BAyB,aAAST,UAAUjE,oBAAV,KAAmC;AA3B5C,IADI;AAAA,GAFC,CAAP;AAgCA;;AAED;AACA,KAAM2E,WAAWR,gBAAjB;;AAEA;;AAEA,KAAIS,QAAQ,EAAZ;AACA,KAAIC,WAAW,EAAf;;AAjHD;AAAA;AAAA;;AAAA;AAmHC,oCAAwBV,gBAAxB,4GACA;AAAA,OADWvB,UACX;;AACC;AACA,OAAIA,WAAU8B,OAAV,CAAkBI,MAAlB,IAA4BzE,MAAhC,EACA;AACC;AACA;;AAED;AACA;AACA,OAAImD,+BAA+B,CAACZ,WAAU8B,OAAV,CAAkBI,MAAtD,EACA;AACC;AACA;;AAED,OAAIlC,WAAU8B,OAAV,CAAkBK,QAAlB,KAA+B,KAAnC,EACA;AACCF,aAASG,IAAT,CAAcpC,WAAUb,OAAxB;AACA;AACA;;AAED;AACA,OAAI8C,SAASb,MAAT,GAAkB,CAAtB,EACA;AACCa,aAASG,IAAT,CAAcpC,WAAUb,OAAxB;AACA6C,UAAMI,IAAN,CAAWH,QAAX;AACAA,eAAW,EAAX;AACA,IALD,MAOA;AACCD,UAAMI,IAAN,CAAWpC,WAAUb,OAArB;AACA;AACD;;AAED;AArJD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAsJC,KAAI8C,SAASb,MAAT,GAAkB,CAAtB,EACA;AACCY,QAAMI,IAAN,CAAWH,SAASb,MAAT,GAAkB,CAAlB,GAAsBa,QAAtB,GAAiCA,SAAS,CAAT,CAA5C;AACA;;AAED;;AAEA,KAAID,MAAMZ,MAAN,KAAiB,CAArB,EACA;AACC;AACA;;AAED,QAAO,YACP;AACC,SAAOY,MAAMK,MAAN,CAAa,UAAClC,OAAD,EAAUmC,IAAV,EACpB;AACC,OAAIZ,MAAMC,OAAN,CAAcW,IAAd,CAAJ,EACA;AACC,WAAOnC,QAAQd,IAAR,CAAa,YACpB;AACC,SAAIV,WAAWiB,SAAf,EACA;AACC;AACA;;AAED,YAAO,SAAQgC,GAAR,CAAYU,KAAKb,GAAL,CAAS;AAAA,aAAUc,QAAV;AAAA,MAAT,CAAZ,CAAP;AACA,KARM,CAAP;AASA;;AAED,UAAOpC,QAAQd,IAAR,CAAa,YACpB;AACC,QAAIV,WAAWiB,SAAf,EACA;AACC;AACA;;AAED,WAAO0C,MAAP;AACA,IARM,CAAP;AASA,GAxBM,EAyBP,SAAQE,OAAR,EAzBO,CAAP;AA0BA,EA5BD;AA6BA,CAhMD;;AAkMA;AACA,SAAS/D,8BAAT,CAAwCP,QAAxC,EAAkDT,MAAlD,EACA;AACC,QAAO,UAACgF,KAAD,EACP;AACC,UAAQA,MAAMrE,IAAd;AAEC;AACA,QAAK5B,OAAL;AACC;AACA,QAAIiB,MAAJ,EACA;AACClB,qBAAgBkG,MAAMnE,QAAtB;AACA;AARH;;AAWA;AACA,SAAOJ,SAASuE,KAAT,CAAP;AACA,EAfD;AAgBA;;AAED;AACA;AACA,SAASxC,kBAAT,CAA4B/B,QAA5B,EAAsCS,UAAtC,EACA;AACC,QAAO,UAAC8D,KAAD,EACP;AACC,UAAQA,MAAMrE,IAAd;AAEC;AACA,QAAK5B,OAAL;AACC;AACAmC,eAAWkB,MAAX;AACA;AACA3B,aAAS,EAAEE,MAAMd,gBAAR,EAAT;AAPF;;AAUA;AACA;AACA,MAAI,OAAOmF,MAAMtC,OAAb,KAAyB,UAA7B,EACA;AACCsC,SAAM9D,UAAN,GAAmB,IAAnB;AACA;;AAED;AACA,SAAOT,SAASuE,KAAT,CAAP;AACA,EArBD;AAsBA","file":"preloading middleware.js","sourcesContent":["// Makes @preload() decorator work.\n// (preloads data required for displaying a page before actually navigating to it)\n\nimport deep_equal from 'deep-equal'\nimport getRouteParams from 'react-router/lib/getRouteParams'\n\nimport { location_url, strip_basename } from '../../location'\nimport { server_redirect } from '../../history'\nimport { Preload, Redirect, GoTo, redirect_action, goto_action, history_redirect_action, history_goto_action } from '../actions'\nimport match_routes_against_location from '../../react-router/match'\nimport get_route_path from '../../react-router/get route path'\nimport { add_instant_back, reset_instant_back } from '../client/instant back'\n\nexport const Preload_method_name  = '__preload__'\nexport const Preload_options_name = '__preload_options__'\n\nexport const Preload_started  = '@@react-isomorphic-render/redux/preload started'\nexport const Preload_finished = '@@react-isomorphic-render/redux/preload finished'\nexport const Preload_failed   = '@@react-isomorphic-render/redux/preload failed'\n\nexport default function preloading_middleware(server, error_handler, preload_helpers, routes, get_history, basename, report_stats, on_navigate)\n{\n\treturn ({ getState, dispatch }) => next => action =>\n\t{\n\t\t// Handle only `Preload` actions\n\t\tif (action.type !== Preload)\n\t\t{\n\t\t\t// Do nothing\n\t\t\treturn next(action)\n\t\t}\n\n\t\t// If `dispatch(redirect(...))` is called, for example,\n\t\t// then the location doesn't contain `basename`,\n\t\t// so set `basename` here.\n\t\t// And, say, when a `<Link to=\"...\"/>` is clicked\n\t\t// then `basename` is not set too, so setting it here too.\n\t\taction.location = strip_basename(action.location, basename)\n\n\t\t// `previous_location` is the location before the transition.\n\t\t// Is used for `instantBack`.\n\t\tconst previous_location = get_history().getCurrentLocation()\n\n\t\t// This idea was discarded because state JSON could be very large.\n\t\t// // If navigation to a new page is taking place\n\t\t// // then store the current Redux state in history.\n\t\t// if (!server && action.navigate)\n\t\t// {\n\t\t// \tstore_in_history('redux/state', get_history().getCurrentLocation().key, getState())\n\t\t// }\n\n\t\t// A special flavour of `dispatch` which `throw`s for redirects on the server side.\n\t\tdispatch = preloading_middleware_dispatch(dispatch, server)\n\n\t\t// Navigation event triggered\n\t\tif (on_navigate && !action.initial)\n\t\t{\n\t\t\ton_navigate(location_url(action.location), action.location)\n\t\t}\n\n\t\t// Preload status object.\n\t\t// `preloading` holds the cancellation flag for this navigation process.\n\t\t// (e.g. preloading `Promise` chain could be cancelled in case of a redirect)\n\t\tconst preloading = {}\n\n\t\t// Can cancel previous preloading (on the client side)\n\t\tlet previous_preloading\n\t\tif (!server)\n\t\t{\n\t\t\tprevious_preloading = window.__preloading_page\n\t\t\twindow.__preloading_page = preloading\n\t\t}\n\n\t\tfunction report_preload_stats(time, route)\n\t\t{\n\t\t\t// preloading.time = time\n\n\t\t\t// This preloading time will be longer then\n\t\t\t// the server-side one, say, by 10 milliseconds, \n\t\t\t// probably because the web browser making\n\t\t\t// an asynchronous HTTP request is slower\n\t\t\t// than the Node.js server making a regular HTTP request.\n\t\t\t// Also this includes network latency\n\t\t\t// for a particular website user, etc.\n\t\t\t// So this `preload` time doesn't actually describe\n\t\t\t// the server-side performance.\n\t\t\tif (report_stats)\n\t\t\t{\n\t\t\t\treport_stats\n\t\t\t\t({\n\t\t\t\t\turl : location_url(action.location),\n\t\t\t\t\troute,\n\t\t\t\t\ttime:\n\t\t\t\t\t{\n\t\t\t\t\t\tpreload: time\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\n\t\treturn match_routes_against_location\n\t\t({\n\t\t\troutes   : typeof routes === 'function' ? routes({ dispatch, getState }) : routes,\n\t\t\thistory  : get_history(),\n\t\t\tlocation : action.location\n\t\t})\n\t\t.then(({ redirect, router_state }) =>\n\t\t{\n\t\t\t// In case of a `react-router` `<Redirect/>`\n\t\t\tif (redirect)\n\t\t\t{\n\t\t\t\t// Shouldn't happen on the server-side in the current setup,\n\t\t\t\t// but just in case.\n\t\t\t\tif (server)\n\t\t\t\t{\n\t\t\t\t\tserver_redirect(redirect)\n\t\t\t\t}\n\n\t\t\t\t// Perform client side redirect\n\t\t\t\t// (with target page preloading)\n\t\t\t\tdispatch(redirect_action(redirect))\n\t\t\t\t// Explicitly return `undefined`\n\t\t\t\t// (not `false` by accident)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// Measures time taken (on the client side)\n\t\t\tlet started_at\n\n\t\t\tif (!server)\n\t\t\t{\n\t\t\t\t// Measures time taken (on the client side)\n\t\t\t\tstarted_at = Date.now()\n\n\t\t\t\t// If on the client side, then store the current pending navigation,\n\t\t\t\t// so that it can be cancelled when a new navigation process takes place\n\t\t\t\t// before the current navigation process finishes.\n\n\t\t\t\t// If there's preceeding navigation pending,\n\t\t\t\t// then cancel that previous navigation.\n\t\t\t\tif (previous_preloading && previous_preloading.pending && !previous_preloading.cancelled)\n\t\t\t\t{\n\t\t\t\t\tprevious_preloading.cancel()\n\t\t\t\t\t// Page loading indicator could listen for this event\n\t\t\t\t\tdispatch({ type: Preload_finished })\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Concatenated `react-router` route string.\n\t\t\t// E.g. \"/user/:user_id/post/:post_id\"\n\t\t\tconst route = get_route_path(router_state)\n\n\t\t\t// `react-router` matched route \"state\"\n\t\t\tconst { routes, components, location, params } = router_state\n\n\t\t\t// Preload all the required data for this route (page)\n\t\t\tconst preload = preloader\n\t\t\t(\n\t\t\t\taction.initial,\n\t\t\t\tserver,\n\t\t\t\troutes,\n\t\t\t\tcomponents,\n\t\t\t\tgetState,\n\t\t\t\tpreloader_dispatch(dispatch, preloading),\n\t\t\t\tget_history(),\n\t\t\t\tlocation,\n\t\t\t\tparams,\n\t\t\t\tpreload_helpers,\n\t\t\t\tpreloading\n\t\t\t)\n\n\t\t\t// If nothing to preload, just move to the next middleware\n\t\t\tif (!preload)\n\t\t\t{\n\t\t\t\t// Trigger `react-router` navigation on client side\n\t\t\t\t// (and do nothing on server side)\n\t\t\t\tproceed_with_navigation(dispatch, action, server, get_history, previous_location)\n\t\t\t\t// Explicitly return `undefined`\n\t\t\t\t// (not `false` by accident)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// Page loading indicator could listen for this event\n\t\t\tdispatch({ type: Preload_started })\n\t\t\t\n\t\t\t// Preload the new page.\n\t\t\t// (the Promise returned is only used in server-side rendering,\n\t\t\t//  client-side rendering never uses this Promise)\n\t\t\tconst promise = preload()\n\n\t\t\tpreloading.pending = true\n\n\t\t\t// Preloading process cancellation\n\t\t\tpreloading.cancel = () =>\n\t\t\t{\n\t\t\t\tpreloading.cancelled = true\n\n\t\t\t\t// If `bluebird` is used,\n\t\t\t\t// and promise cancellation has been set up,\n\t\t\t\t// then cancel the `Promise`.\n\t\t\t\t// http://bluebirdjs.com/docs/api/cancellation.html\n\t\t\t\tif (promise.cancel)\n\t\t\t\t{\n\t\t\t\t\t// `.catch()` is to suppress \"Uncaught promise rejection\" errors\n\t\t\t\t\tpromise.catch(() => ({})).cancel()\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn promise\n\t\t\t\t// Navigate to the new page\n\t\t\t\t.then(() =>\n\t\t\t\t{\n\t\t\t\t\tpreloading.pending = false\n\n\t\t\t\t\t// If this navigation process was cancelled\n\t\t\t\t\t// before @preload() finished its work,\n\t\t\t\t\t// then don't take any further steps on this cancelled navigation.\n\t\t\t\t\tif (preloading.cancelled)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Return `false` out of the `Promise`\n\t\t\t\t\t\t// indicating that the navigation was cancelled.\n\t\t\t\t\t\treturn false\n\t\t\t\t\t}\n\n\t\t\t\t\t// Page loading indicator could listen for this event\n\t\t\t\t\tdispatch({ type: Preload_finished })\n\n\t\t\t\t\t// Report preloading time\n\t\t\t\t\treport_preload_stats(Date.now() - started_at, route)\n\n\t\t\t\t\t// Trigger `react-router` navigation on client side\n\t\t\t\t\t// (and do nothing on server side)\n\t\t\t\t\tproceed_with_navigation(dispatch, action, server, get_history, previous_location)\n\t\t\t\t},\n\t\t\t\t(error) =>\n\t\t\t\t{\n\t\t\t\t\t// If this navigation process was cancelled\n\t\t\t\t\t// before @preload() finished its work,\n\t\t\t\t\t// then don't take any further steps on this cancelled navigation.\n\t\t\t\t\tif (!preloading.cancelled)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (!server)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpreloading.error = error\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Page loading indicator could listen for this event\n\t\t\t\t\t\tdispatch({ type: Preload_failed, error })\n\t\t\t\t\t}\n\n\t\t\t\t\tthrow error\n\t\t\t\t})\n\t\t})\n\t\t.catch((error) =>\n\t\t{\n\t\t\t// Update preload status object\n\t\t\tpreloading.pending = false\n\t\t\t// preloading.error = error\n\n\t\t\t// If the error was a redirection exception (not a error),\n\t\t\t// then just exit and do nothing.\n\t\t\t// (happens only on server side)\n\t\t\tif (server && error._redirect)\n\t\t\t{\n\t\t\t\t// No need to emit `Preload_finished`\n\t\t\t\t// since the current page is simply discarded.\n\t\t\t\tthrow error\n\t\t\t}\n\n\t\t\t// Possibly handle the error (for example, redirect to an error page)\n\t\t\terror_handler(error,\n\t\t\t{\n\t\t\t\tpath : action.location.pathname,\n\t\t\t\turl  : location_url(action.location),\n\t\t\t\t// Using `redirect_action` instead of `goto_action` here\n\t\t\t\t// so that the user can't go \"Back\" to the page being preloaded\n\t\t\t\t// in case of an error because it would be in inconsistent state\n\t\t\t\t// due to `@preload()` being interrupted.\n\t\t\t\tredirect : to => dispatch(redirect_action(to)),\n\t\t\t\tdispatch,\n\t\t\t\tgetState,\n\t\t\t\tserver\n\t\t\t})\n\n\t\t\t// If redirect happened on the server side\n\t\t\t// then a special redirection error was thrown.\n\t\t\t// Otherwise just rethrow the error\n\t\t\t// (always the case on the client side).\n\t\t\t//\n\t\t\t// This error will be handled in `web server` `catch` clause\n\t\t\t// if this code is being run on the server side.\n\t\t\t// On the client side it just outputs errors to console.\n\t\t\t//\n\t\t\tthrow error\n\t\t})\n\t}\n}\n\n// Trigger `react-router` navigation on client side\n// (and do nothing on server side).\n// `previous_location` is the location before the transition.\nfunction proceed_with_navigation(dispatch, action, server, get_history, previous_location)\n{\n\tif (server)\n\t{\n\t\treturn\n\t}\n\n\tif (action.navigate)\n\t{\n\t\tif (action.redirect)\n\t\t{\n\t\t\tdispatch(history_redirect_action(action.location))\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdispatch(history_goto_action(action.location))\n\t\t}\n\t}\n\n\tif (action.instant_back)\n\t{\n\t\tadd_instant_back(get_history().getCurrentLocation(), previous_location)\n\t}\n\t// Deactivate \"instant back\" for the current page\n\t// if this new transition is not \"instant back\" too.\n\t// Only \"instant back\" chain navigation preserves\n\t// the ability to instantly navigate \"Back\".\n\telse\n\t{\n\t\treset_instant_back()\n\t}\n}\n\n// Returns function returning a Promise \n// which resolves when all the required preload()s are resolved.\n//\n// If no preloading is needed, then returns nothing.\n//\nconst preloader = (initial_client_side_preload, server, routes, components, getState, dispatch, history, location, parameters, preload_helpers, preloading) =>\n{\n\tlet preload_arguments = { dispatch, getState, history, location, parameters }\n\n\tif (preload_helpers)\n\t{\n\t\tpreload_arguments = { ...preload_arguments, ...preload_helpers }\n\t}\n\n\t// A minor optimization for skipping `@preload()`s\n\t// for those parent `<Route/>`s which haven't changed\n\t// as a result of a client-side navigation.\n\t//\n\t// On the client side:\n\t//\n\t// Take the previous route components\n\t// (along with their parameters) \n\t// and the next route components\n\t// (along with their parameters),\n\t// and compare them side-by-side\n\t// filtering out the same top level components\n\t// (both having the same component classes\n\t//  and having the same parameters).\n\t//\n\t// Therefore @preload() methods could be skipped\n\t// for those top level components which remain\n\t// the same (and in the same state).\n\t// This would be an optimization.\n\t//\n\t// (e.g. the main <Route/> could be @preload()ed only once - on the server side)\n\t//\n\t// At the same time, at least one component should be preloaded:\n\t// even if navigating to the same page it still kinda makes sense to reload it.\n\t// (assuming it's not an \"anchor\" hyperlink navigation)\n\t//\n\t// Parameters for each `<Route/>` component can be found using this helper method:\n\t// https://github.com/ReactTraining/react-router/blob/master/modules/getRouteParams.js\n\t//\n\t// Also, GET query parameters would also need to be compared, I guess.\n\t// But, I guess, it would make sense to assume that GET parameters\n\t// only affect the last <Route/> component in the chain.\n\t// And, in general, GET query parameters should be avoided,\n\t// but that's not the case for example with search forms.\n\t// So here we assume that GET query parameters only\n\t// influence the last <Route/> component in the chain\n\t// which is gonna be reloaded anyway.\n\t//\n\tif (!server)\n\t{\n\t\tif (window._previous_routes)\n\t\t{\n\t\t\tconst previous_routes     = window._previous_routes\n\t\t\tconst previous_parameters = window._previous_route_parameters\n\t\t\n\t\t\tlet i = 0\n\t\t\twhile (i < routes.length - 1 && \n\t\t\t\tprevious_routes[i].component === routes[i].component &&\n\t\t\t\tdeep_equal(getRouteParams(previous_routes[i], previous_parameters), getRouteParams(routes[i], parameters)))\n\t\t\t{\n\t\t\t\ti++\n\t\t\t}\n\t\t\n\t\t\tcomponents = components.slice(i)\n\t\t}\n\t\t\n\t\twindow._previous_routes           = routes\n\t\twindow._previous_route_parameters = parameters\n\t}\n\n\t// finds all `preload` (or `preload_deferred`) methods \n\t// (they will be executed in parallel)\n\tfunction get_preloaders()\n\t{\n\t\t// find all `preload` methods on the React-Router component chain\n\t\treturn components\n\t\t\t.filter(component => component && component[Preload_method_name])\n\t\t\t.map(component =>\n\t\t\t({\n\t\t\t\tpreload: () =>\n\t\t\t\t{\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\t// `preload()` returns a Promise\n\t\t\t\t\t\tlet promise = component[Preload_method_name](preload_arguments)\n\n\t\t\t\t\t\t// Convert `array`s into `Promise.all(array)`\n\t\t\t\t\t\tif (Array.isArray(promise))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpromise = Promise.all(promise)\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Sanity check\n\t\t\t\t\t\tif (!promise || typeof promise.then !== 'function')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn Promise.reject(`Preload function must return a Promise. Got:`, promise)\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn promise\n\t\t\t\t\t}\n\t\t\t\t\tcatch (error)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn Promise.reject(error)\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\toptions: component[Preload_options_name] || {}\n\t\t\t}))\n\t}\n\n\t// Get all `preload` methods on the React-Router component chain\n\tconst preloads = get_preloaders()\n\n\t// Construct `preload` chain\n\n\tlet chain = []\n\tlet parallel = []\n\n\tfor (const preloader of get_preloaders())\n\t{\n\t\t// Don't execute client-side-only `@preload()`s on server side\n\t\tif (preloader.options.client && server)\n\t\t{\n\t\t\tcontinue\n\t\t}\n\n\t\t// If it's initial client side preload (after the page has been loaded),\n\t\t// then only execute those `@preload()`s marked as \"client-side-only\".\n\t\tif (initial_client_side_preload && !preloader.options.client)\n\t\t{\n\t\t\tcontinue\n\t\t}\n\n\t\tif (preloader.options.blocking === false)\n\t\t{\n\t\t\tparallel.push(preloader.preload)\n\t\t\tcontinue\n\t\t}\n\n\t\t// Copy-pasta\n\t\tif (parallel.length > 0)\n\t\t{\n\t\t\tparallel.push(preloader.preload)\n\t\t\tchain.push(parallel)\n\t\t\tparallel = []\n\t\t}\n\t\telse\n\t\t{\n\t\t\tchain.push(preloader.preload)\n\t\t}\n\t}\n\n\t// Finalize trailing parallel `preload`s\n\tif (parallel.length > 0)\n\t{\n\t\tchain.push(parallel.length > 1 ? parallel : parallel[0])\n\t}\n\n\t// Convert `preload` chain into `Promise` chain\n\n\tif (chain.length === 0)\n\t{\n\t\treturn\n\t}\n\n\treturn function()\n\t{\n\t\treturn chain.reduce((promise, link) =>\n\t\t{\n\t\t\tif (Array.isArray(link))\n\t\t\t{\n\t\t\t\treturn promise.then(() =>\n\t\t\t\t{\n\t\t\t\t\tif (preloading.cancelled)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\n\t\t\t\t\treturn Promise.all(link.map(thread => thread()))\n\t\t\t\t})\n\t\t\t}\n\n\t\t\treturn promise.then(() =>\n\t\t\t{\n\t\t\t\tif (preloading.cancelled)\n\t\t\t\t{\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\treturn link()\n\t\t\t})\n\t\t},\n\t\tPromise.resolve())\n\t}\n}\n\n// A special flavour of `dispatch` which `throw`s for redirects on the server side.\nfunction preloading_middleware_dispatch(dispatch, server)\n{\n\treturn (event) =>\n\t{\n\t\tswitch (event.type)\n\t\t{\n\t\t\t// In case of navigation from @preload()\n\t\t\tcase Preload:\n\t\t\t\t// `throw`s a special `Error` on server side\n\t\t\t\tif (server)\n\t\t\t\t{\n\t\t\t\t\tserver_redirect(event.location)\n\t\t\t\t}\n\t\t}\n\n\t\t// Proceed with the original\n\t\treturn dispatch(event)\n\t}\n}\n\n// A special flavour of `dispatch` for `@preload()` arguments.\n// It detects redirection or navigation and cancels the current preload.\nfunction preloader_dispatch(dispatch, preloading)\n{\n\treturn (event) =>\n\t{\n\t\tswitch (event.type)\n\t\t{\n\t\t\t// In case of navigation from @preload()\n\t\t\tcase Preload:\n\t\t\t\t// Discard the currently ongoing preloading\n\t\t\t\tpreloading.cancel()\n\t\t\t\t// Page loading indicator could listen for this event\n\t\t\t\tdispatch({ type: Preload_finished })\n\t\t}\n\n\t\t// Mark `http` calls so that they don't get \"error handled\" twice\n\t\t// (doesn't affect anything, just a minor optimization)\n\t\tif (typeof event.promise === 'function')\n\t\t{\n\t\t\tevent.preloading = true\n\t\t}\n\n\t\t// Proceed with the original\n\t\treturn dispatch(event)\n\t}\n}"]}