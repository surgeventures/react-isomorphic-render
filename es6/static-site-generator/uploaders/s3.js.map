{"version":3,"sources":["../../../source/static-site-generator/uploaders/s3.js"],"names":["s3","S3Uploader","accessKeyId","secretAccessKey","region","bucket","upload","directory","started","progress","params","localDir","deleteRemoved","s3Params","Bucket","s3Client","createClient","maxAsyncS3","s3RetryCount","s3RetryDelay","multipartUploadThreshold","multipartUploadSize","s3Options","uploader","uploadDir","initialized","on","progressMd5Total","progressMd5Amount","resolve","reject"],"mappings":";AAAA,OAAOA,EAAP,MAAe,IAAf;;AAEA,eAAe,SAASC,UAAT,OACf;AAAA,KADqCC,WACrC,QADqCA,WACrC;AAAA,KADkDC,eAClD,QADkDA,eAClD;AAAA,KADmEC,MACnE,QADmEA,MACnE;AAAA,KAD2EC,MAC3E,QAD2EA,MAC3E;;AACC,QAAO,SAASC,MAAT,CAAgBC,SAAhB,SACP;AAAA,MADoCC,OACpC,SADoCA,OACpC;AAAA,MAD6CC,QAC7C,SAD6CA,QAC7C;;AACC,MAAMC,SACN;AACCC,aAAUJ,SADX;AAECK,kBAAe,IAFhB,EAEsB;AACrBC,aACA;AACCC,YAAQT;AADT;AAJD,GADA;;AAUA,MAAMU,WAAWf,GAAGgB,YAAH,CAChB;AACAC,eAAY,EADZ,EACoB;AACpBC,iBAAc,CAFd,EAEoB;AACpBC,iBAAc,IAHd,EAGoB;AACpBC,6BAA0B,QAJ1B,EAIoC;AACpCC,wBAAqB,QALrB,EAK+B;AAC/BC,cACA;AACCpB,4BADD;AAECC,oCAFD;AAGCC;AAHD;AAPA,GADgB,CAAjB;;AAeA,MAAMmB,WAAWR,SAASS,SAAT,CAAmBd,MAAnB,CAAjB;;AAEA,MAAIe,cAAc,KAAlB;;AAEAF,WAASG,EAAT,CAAY,UAAZ,EAAwB,YACxB;AACC,OAAI,CAACD,WAAD,IAAgBF,SAASI,gBAA7B,EACA;AACCnB,YAAQe,SAASI,gBAAjB;AACAF,kBAAc,IAAd;AACA;AACD,OAAIA,WAAJ,EACA;AACChB,aAASc,SAASK,iBAAT,GAA6BL,SAASI,gBAA/C;AACA;AACD,GAXD;;AAaA,SAAO,aAAY,UAACE,OAAD,EAAUC,MAAV,EACnB;AACCP,YAASG,EAAT,CAAY,KAAZ,EAAmBG,OAAnB;AACAN,YAASG,EAAT,CAAY,OAAZ,EAAqBI,MAArB;AACA,GAJM,CAAP;AAKA,EAjDD;AAkDA","file":"s3.js","sourcesContent":["import s3 from 's3'\n\nexport default function S3Uploader({ accessKeyId, secretAccessKey, region, bucket })\n{\n\treturn function upload(directory, { started, progress })\n\t{\n\t\tconst params =\n\t\t{\n\t\t\tlocalDir: directory,\n\t\t\tdeleteRemoved: true, // default false, whether to remove s3 objects\n\t\t\ts3Params:\n\t\t\t{\n\t\t\t\tBucket: bucket\n\t\t\t}\n\t\t}\n\n\t\tconst s3Client = s3.createClient\n\t\t({\n\t\t\tmaxAsyncS3: 20,     // this is the default\n\t\t\ts3RetryCount: 3,    // this is the default\n\t\t\ts3RetryDelay: 1000, // this is the default\n\t\t\tmultipartUploadThreshold: 20971520, // this is the default (20 MB)\n\t\t\tmultipartUploadSize: 15728640, // this is the default (15 MB)\n\t\t\ts3Options:\n\t\t\t{\n\t\t\t\taccessKeyId,\n\t\t\t\tsecretAccessKey,\n\t\t\t\tregion\n\t\t\t}\n\t\t})\n\n\t\tconst uploader = s3Client.uploadDir(params)\n\n\t\tlet initialized = false\n\n\t\tuploader.on('progress', () =>\n\t\t{\n\t\t\tif (!initialized && uploader.progressMd5Total)\n\t\t\t{\n\t\t\t\tstarted(uploader.progressMd5Total)\n\t\t\t\tinitialized = true\n\t\t\t}\n\t\t\tif (initialized)\n\t\t\t{\n\t\t\t\tprogress(uploader.progressMd5Amount / uploader.progressMd5Total)\n\t\t\t}\n\t\t})\n\n\t\treturn new Promise((resolve, reject) =>\n\t\t{\n\t\t\tuploader.on('end', resolve)\n\t\t\tuploader.on('error', reject)\n\t\t})\n\t}\n}"]}